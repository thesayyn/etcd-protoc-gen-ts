/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: rpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/api/annotations";
import * as dependency_2 from "./kv";
import * as dependency_3 from "./auth";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export enum AlarmType {
    None = 0,
    Nospace = 1,
    Corrupt = 2
}
export class ResponseHeader extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        cluster_id?: number;
        member_id?: number;
        revision?: number;
        raft_term?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cluster_id" in data && data.cluster_id != undefined) {
                this.cluster_id = data.cluster_id;
            }
            if ("member_id" in data && data.member_id != undefined) {
                this.member_id = data.member_id;
            }
            if ("revision" in data && data.revision != undefined) {
                this.revision = data.revision;
            }
            if ("raft_term" in data && data.raft_term != undefined) {
                this.raft_term = data.raft_term;
            }
        }
    }
    get cluster_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set cluster_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get member_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set member_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get revision() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set revision(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get raft_term() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set raft_term(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        cluster_id?: number;
        member_id?: number;
        revision?: number;
        raft_term?: number;
    }): ResponseHeader {
        const message = new ResponseHeader({});
        if (data.cluster_id != null) {
            message.cluster_id = data.cluster_id;
        }
        if (data.member_id != null) {
            message.member_id = data.member_id;
        }
        if (data.revision != null) {
            message.revision = data.revision;
        }
        if (data.raft_term != null) {
            message.raft_term = data.raft_term;
        }
        return message;
    }
    toObject() {
        const data: {
            cluster_id?: number;
            member_id?: number;
            revision?: number;
            raft_term?: number;
        } = {};
        if (this.cluster_id != null) {
            data.cluster_id = this.cluster_id;
        }
        if (this.member_id != null) {
            data.member_id = this.member_id;
        }
        if (this.revision != null) {
            data.revision = this.revision;
        }
        if (this.raft_term != null) {
            data.raft_term = this.raft_term;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cluster_id != 0)
            writer.writeUint64(1, this.cluster_id);
        if (this.member_id != 0)
            writer.writeUint64(2, this.member_id);
        if (this.revision != 0)
            writer.writeInt64(3, this.revision);
        if (this.raft_term != 0)
            writer.writeUint64(4, this.raft_term);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseHeader {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseHeader();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.cluster_id = reader.readUint64();
                    break;
                case 2:
                    message.member_id = reader.readUint64();
                    break;
                case 3:
                    message.revision = reader.readInt64();
                    break;
                case 4:
                    message.raft_term = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): ResponseHeader {
        return ResponseHeader.deserialize(bytes);
    }
}
export class RangeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: Uint8Array;
        range_end?: Uint8Array;
        limit?: number;
        revision?: number;
        sort_order?: RangeRequestSortOrder;
        sort_target?: RangeRequestSortTarget;
        serializable?: boolean;
        keys_only?: boolean;
        count_only?: boolean;
        min_mod_revision?: number;
        max_mod_revision?: number;
        min_create_revision?: number;
        max_create_revision?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("range_end" in data && data.range_end != undefined) {
                this.range_end = data.range_end;
            }
            if ("limit" in data && data.limit != undefined) {
                this.limit = data.limit;
            }
            if ("revision" in data && data.revision != undefined) {
                this.revision = data.revision;
            }
            if ("sort_order" in data && data.sort_order != undefined) {
                this.sort_order = data.sort_order;
            }
            if ("sort_target" in data && data.sort_target != undefined) {
                this.sort_target = data.sort_target;
            }
            if ("serializable" in data && data.serializable != undefined) {
                this.serializable = data.serializable;
            }
            if ("keys_only" in data && data.keys_only != undefined) {
                this.keys_only = data.keys_only;
            }
            if ("count_only" in data && data.count_only != undefined) {
                this.count_only = data.count_only;
            }
            if ("min_mod_revision" in data && data.min_mod_revision != undefined) {
                this.min_mod_revision = data.min_mod_revision;
            }
            if ("max_mod_revision" in data && data.max_mod_revision != undefined) {
                this.max_mod_revision = data.max_mod_revision;
            }
            if ("min_create_revision" in data && data.min_create_revision != undefined) {
                this.min_create_revision = data.min_create_revision;
            }
            if ("max_create_revision" in data && data.max_create_revision != undefined) {
                this.max_create_revision = data.max_create_revision;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set key(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get range_end() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set range_end(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get limit() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set limit(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get revision() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set revision(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get sort_order() {
        return pb_1.Message.getFieldWithDefault(this, 5, RangeRequestSortOrder.None) as RangeRequestSortOrder;
    }
    set sort_order(value: RangeRequestSortOrder) {
        pb_1.Message.setField(this, 5, value);
    }
    get sort_target() {
        return pb_1.Message.getFieldWithDefault(this, 6, RangeRequestSortTarget.Key) as RangeRequestSortTarget;
    }
    set sort_target(value: RangeRequestSortTarget) {
        pb_1.Message.setField(this, 6, value);
    }
    get serializable() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set serializable(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get keys_only() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set keys_only(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get count_only() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set count_only(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get min_mod_revision() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set min_mod_revision(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get max_mod_revision() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set max_mod_revision(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get min_create_revision() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set min_create_revision(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get max_create_revision() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set max_create_revision(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        key?: Uint8Array;
        range_end?: Uint8Array;
        limit?: number;
        revision?: number;
        sort_order?: RangeRequestSortOrder;
        sort_target?: RangeRequestSortTarget;
        serializable?: boolean;
        keys_only?: boolean;
        count_only?: boolean;
        min_mod_revision?: number;
        max_mod_revision?: number;
        min_create_revision?: number;
        max_create_revision?: number;
    }): RangeRequest {
        const message = new RangeRequest({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.range_end != null) {
            message.range_end = data.range_end;
        }
        if (data.limit != null) {
            message.limit = data.limit;
        }
        if (data.revision != null) {
            message.revision = data.revision;
        }
        if (data.sort_order != null) {
            message.sort_order = data.sort_order;
        }
        if (data.sort_target != null) {
            message.sort_target = data.sort_target;
        }
        if (data.serializable != null) {
            message.serializable = data.serializable;
        }
        if (data.keys_only != null) {
            message.keys_only = data.keys_only;
        }
        if (data.count_only != null) {
            message.count_only = data.count_only;
        }
        if (data.min_mod_revision != null) {
            message.min_mod_revision = data.min_mod_revision;
        }
        if (data.max_mod_revision != null) {
            message.max_mod_revision = data.max_mod_revision;
        }
        if (data.min_create_revision != null) {
            message.min_create_revision = data.min_create_revision;
        }
        if (data.max_create_revision != null) {
            message.max_create_revision = data.max_create_revision;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: Uint8Array;
            range_end?: Uint8Array;
            limit?: number;
            revision?: number;
            sort_order?: RangeRequestSortOrder;
            sort_target?: RangeRequestSortTarget;
            serializable?: boolean;
            keys_only?: boolean;
            count_only?: boolean;
            min_mod_revision?: number;
            max_mod_revision?: number;
            min_create_revision?: number;
            max_create_revision?: number;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.range_end != null) {
            data.range_end = this.range_end;
        }
        if (this.limit != null) {
            data.limit = this.limit;
        }
        if (this.revision != null) {
            data.revision = this.revision;
        }
        if (this.sort_order != null) {
            data.sort_order = this.sort_order;
        }
        if (this.sort_target != null) {
            data.sort_target = this.sort_target;
        }
        if (this.serializable != null) {
            data.serializable = this.serializable;
        }
        if (this.keys_only != null) {
            data.keys_only = this.keys_only;
        }
        if (this.count_only != null) {
            data.count_only = this.count_only;
        }
        if (this.min_mod_revision != null) {
            data.min_mod_revision = this.min_mod_revision;
        }
        if (this.max_mod_revision != null) {
            data.max_mod_revision = this.max_mod_revision;
        }
        if (this.min_create_revision != null) {
            data.min_create_revision = this.min_create_revision;
        }
        if (this.max_create_revision != null) {
            data.max_create_revision = this.max_create_revision;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeBytes(1, this.key);
        if (this.range_end.length)
            writer.writeBytes(2, this.range_end);
        if (this.limit != 0)
            writer.writeInt64(3, this.limit);
        if (this.revision != 0)
            writer.writeInt64(4, this.revision);
        if (this.sort_order != RangeRequestSortOrder.None)
            writer.writeEnum(5, this.sort_order);
        if (this.sort_target != RangeRequestSortTarget.Key)
            writer.writeEnum(6, this.sort_target);
        if (this.serializable != false)
            writer.writeBool(7, this.serializable);
        if (this.keys_only != false)
            writer.writeBool(8, this.keys_only);
        if (this.count_only != false)
            writer.writeBool(9, this.count_only);
        if (this.min_mod_revision != 0)
            writer.writeInt64(10, this.min_mod_revision);
        if (this.max_mod_revision != 0)
            writer.writeInt64(11, this.max_mod_revision);
        if (this.min_create_revision != 0)
            writer.writeInt64(12, this.min_create_revision);
        if (this.max_create_revision != 0)
            writer.writeInt64(13, this.max_create_revision);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RangeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RangeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readBytes();
                    break;
                case 2:
                    message.range_end = reader.readBytes();
                    break;
                case 3:
                    message.limit = reader.readInt64();
                    break;
                case 4:
                    message.revision = reader.readInt64();
                    break;
                case 5:
                    message.sort_order = reader.readEnum();
                    break;
                case 6:
                    message.sort_target = reader.readEnum();
                    break;
                case 7:
                    message.serializable = reader.readBool();
                    break;
                case 8:
                    message.keys_only = reader.readBool();
                    break;
                case 9:
                    message.count_only = reader.readBool();
                    break;
                case 10:
                    message.min_mod_revision = reader.readInt64();
                    break;
                case 11:
                    message.max_mod_revision = reader.readInt64();
                    break;
                case 12:
                    message.min_create_revision = reader.readInt64();
                    break;
                case 13:
                    message.max_create_revision = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): RangeRequest {
        return RangeRequest.deserialize(bytes);
    }
}
export enum RangeRequestSortOrder {
    None = 0,
    Ascend = 1,
    Descend = 2
}
export enum RangeRequestSortTarget {
    Key = 0,
    Version = 1,
    Create = 2,
    Mod = 3,
    Value = 4
}
export class RangeResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        kvs?: dependency_2.KeyValue[];
        more?: boolean;
        count?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("kvs" in data && data.kvs != undefined) {
                this.kvs = data.kvs;
            }
            if ("more" in data && data.more != undefined) {
                this.more = data.more;
            }
            if ("count" in data && data.count != undefined) {
                this.count = data.count;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get kvs() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.KeyValue, 2) as dependency_2.KeyValue[];
    }
    set kvs(value: dependency_2.KeyValue[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get more() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set more(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get count() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set count(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        kvs?: ReturnType<typeof dependency_2.KeyValue.prototype.toObject>[];
        more?: boolean;
        count?: number;
    }): RangeResponse {
        const message = new RangeResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.kvs != null) {
            message.kvs = data.kvs.map(item => dependency_2.KeyValue.fromObject(item));
        }
        if (data.more != null) {
            message.more = data.more;
        }
        if (data.count != null) {
            message.count = data.count;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            kvs?: ReturnType<typeof dependency_2.KeyValue.prototype.toObject>[];
            more?: boolean;
            count?: number;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.kvs != null) {
            data.kvs = this.kvs.map((item: dependency_2.KeyValue) => item.toObject());
        }
        if (this.more != null) {
            data.more = this.more;
        }
        if (this.count != null) {
            data.count = this.count;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.kvs.length)
            writer.writeRepeatedMessage(2, this.kvs, (item: dependency_2.KeyValue) => item.serialize(writer));
        if (this.more != false)
            writer.writeBool(3, this.more);
        if (this.count != 0)
            writer.writeInt64(4, this.count);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RangeResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RangeResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.kvs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.KeyValue.deserialize(reader), dependency_2.KeyValue));
                    break;
                case 3:
                    message.more = reader.readBool();
                    break;
                case 4:
                    message.count = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): RangeResponse {
        return RangeResponse.deserialize(bytes);
    }
}
export class PutRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: Uint8Array;
        value?: Uint8Array;
        lease?: number;
        prev_kv?: boolean;
        ignore_value?: boolean;
        ignore_lease?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("lease" in data && data.lease != undefined) {
                this.lease = data.lease;
            }
            if ("prev_kv" in data && data.prev_kv != undefined) {
                this.prev_kv = data.prev_kv;
            }
            if ("ignore_value" in data && data.ignore_value != undefined) {
                this.ignore_value = data.ignore_value;
            }
            if ("ignore_lease" in data && data.ignore_lease != undefined) {
                this.ignore_lease = data.ignore_lease;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set key(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set value(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get lease() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set lease(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get prev_kv() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set prev_kv(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get ignore_value() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set ignore_value(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get ignore_lease() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set ignore_lease(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        key?: Uint8Array;
        value?: Uint8Array;
        lease?: number;
        prev_kv?: boolean;
        ignore_value?: boolean;
        ignore_lease?: boolean;
    }): PutRequest {
        const message = new PutRequest({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.lease != null) {
            message.lease = data.lease;
        }
        if (data.prev_kv != null) {
            message.prev_kv = data.prev_kv;
        }
        if (data.ignore_value != null) {
            message.ignore_value = data.ignore_value;
        }
        if (data.ignore_lease != null) {
            message.ignore_lease = data.ignore_lease;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: Uint8Array;
            value?: Uint8Array;
            lease?: number;
            prev_kv?: boolean;
            ignore_value?: boolean;
            ignore_lease?: boolean;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.lease != null) {
            data.lease = this.lease;
        }
        if (this.prev_kv != null) {
            data.prev_kv = this.prev_kv;
        }
        if (this.ignore_value != null) {
            data.ignore_value = this.ignore_value;
        }
        if (this.ignore_lease != null) {
            data.ignore_lease = this.ignore_lease;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeBytes(1, this.key);
        if (this.value.length)
            writer.writeBytes(2, this.value);
        if (this.lease != 0)
            writer.writeInt64(3, this.lease);
        if (this.prev_kv != false)
            writer.writeBool(4, this.prev_kv);
        if (this.ignore_value != false)
            writer.writeBool(5, this.ignore_value);
        if (this.ignore_lease != false)
            writer.writeBool(6, this.ignore_lease);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readBytes();
                    break;
                case 2:
                    message.value = reader.readBytes();
                    break;
                case 3:
                    message.lease = reader.readInt64();
                    break;
                case 4:
                    message.prev_kv = reader.readBool();
                    break;
                case 5:
                    message.ignore_value = reader.readBool();
                    break;
                case 6:
                    message.ignore_lease = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): PutRequest {
        return PutRequest.deserialize(bytes);
    }
}
export class PutResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        prev_kv?: dependency_2.KeyValue;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("prev_kv" in data && data.prev_kv != undefined) {
                this.prev_kv = data.prev_kv;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get prev_kv() {
        return pb_1.Message.getWrapperField(this, dependency_2.KeyValue, 2) as dependency_2.KeyValue;
    }
    set prev_kv(value: dependency_2.KeyValue) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_prev_kv() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        prev_kv?: ReturnType<typeof dependency_2.KeyValue.prototype.toObject>;
    }): PutResponse {
        const message = new PutResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.prev_kv != null) {
            message.prev_kv = dependency_2.KeyValue.fromObject(data.prev_kv);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            prev_kv?: ReturnType<typeof dependency_2.KeyValue.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.prev_kv != null) {
            data.prev_kv = this.prev_kv.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.has_prev_kv)
            writer.writeMessage(2, this.prev_kv, () => this.prev_kv.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.prev_kv, () => message.prev_kv = dependency_2.KeyValue.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): PutResponse {
        return PutResponse.deserialize(bytes);
    }
}
export class DeleteRangeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: Uint8Array;
        range_end?: Uint8Array;
        prev_kv?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("range_end" in data && data.range_end != undefined) {
                this.range_end = data.range_end;
            }
            if ("prev_kv" in data && data.prev_kv != undefined) {
                this.prev_kv = data.prev_kv;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set key(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get range_end() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set range_end(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get prev_kv() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set prev_kv(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        key?: Uint8Array;
        range_end?: Uint8Array;
        prev_kv?: boolean;
    }): DeleteRangeRequest {
        const message = new DeleteRangeRequest({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.range_end != null) {
            message.range_end = data.range_end;
        }
        if (data.prev_kv != null) {
            message.prev_kv = data.prev_kv;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: Uint8Array;
            range_end?: Uint8Array;
            prev_kv?: boolean;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.range_end != null) {
            data.range_end = this.range_end;
        }
        if (this.prev_kv != null) {
            data.prev_kv = this.prev_kv;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeBytes(1, this.key);
        if (this.range_end.length)
            writer.writeBytes(2, this.range_end);
        if (this.prev_kv != false)
            writer.writeBool(3, this.prev_kv);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRangeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRangeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readBytes();
                    break;
                case 2:
                    message.range_end = reader.readBytes();
                    break;
                case 3:
                    message.prev_kv = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): DeleteRangeRequest {
        return DeleteRangeRequest.deserialize(bytes);
    }
}
export class DeleteRangeResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        deleted?: number;
        prev_kvs?: dependency_2.KeyValue[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("prev_kvs" in data && data.prev_kvs != undefined) {
                this.prev_kvs = data.prev_kvs;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get deleted() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set deleted(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get prev_kvs() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.KeyValue, 3) as dependency_2.KeyValue[];
    }
    set prev_kvs(value: dependency_2.KeyValue[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        deleted?: number;
        prev_kvs?: ReturnType<typeof dependency_2.KeyValue.prototype.toObject>[];
    }): DeleteRangeResponse {
        const message = new DeleteRangeResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.deleted != null) {
            message.deleted = data.deleted;
        }
        if (data.prev_kvs != null) {
            message.prev_kvs = data.prev_kvs.map(item => dependency_2.KeyValue.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            deleted?: number;
            prev_kvs?: ReturnType<typeof dependency_2.KeyValue.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.deleted != null) {
            data.deleted = this.deleted;
        }
        if (this.prev_kvs != null) {
            data.prev_kvs = this.prev_kvs.map((item: dependency_2.KeyValue) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.deleted != 0)
            writer.writeInt64(2, this.deleted);
        if (this.prev_kvs.length)
            writer.writeRepeatedMessage(3, this.prev_kvs, (item: dependency_2.KeyValue) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRangeResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRangeResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.deleted = reader.readInt64();
                    break;
                case 3:
                    reader.readMessage(message.prev_kvs, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.KeyValue.deserialize(reader), dependency_2.KeyValue));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): DeleteRangeResponse {
        return DeleteRangeResponse.deserialize(bytes);
    }
}
export class RequestOp extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4]];
    constructor(data?: any[] | ({} & (({
        request_range?: RangeRequest;
        request_put?: never;
        request_delete_range?: never;
        request_txn?: never;
    } | {
        request_range?: never;
        request_put?: PutRequest;
        request_delete_range?: never;
        request_txn?: never;
    } | {
        request_range?: never;
        request_put?: never;
        request_delete_range?: DeleteRangeRequest;
        request_txn?: never;
    } | {
        request_range?: never;
        request_put?: never;
        request_delete_range?: never;
        request_txn?: TxnRequest;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request_range" in data && data.request_range != undefined) {
                this.request_range = data.request_range;
            }
            if ("request_put" in data && data.request_put != undefined) {
                this.request_put = data.request_put;
            }
            if ("request_delete_range" in data && data.request_delete_range != undefined) {
                this.request_delete_range = data.request_delete_range;
            }
            if ("request_txn" in data && data.request_txn != undefined) {
                this.request_txn = data.request_txn;
            }
        }
    }
    get request_range() {
        return pb_1.Message.getWrapperField(this, RangeRequest, 1) as RangeRequest;
    }
    set request_range(value: RangeRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_request_range() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get request_put() {
        return pb_1.Message.getWrapperField(this, PutRequest, 2) as PutRequest;
    }
    set request_put(value: PutRequest) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_request_put() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get request_delete_range() {
        return pb_1.Message.getWrapperField(this, DeleteRangeRequest, 3) as DeleteRangeRequest;
    }
    set request_delete_range(value: DeleteRangeRequest) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_request_delete_range() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get request_txn() {
        return pb_1.Message.getWrapperField(this, TxnRequest, 4) as TxnRequest;
    }
    set request_txn(value: TxnRequest) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_request_txn() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get request() {
        const cases: {
            [index: number]: "none" | "request_range" | "request_put" | "request_delete_range" | "request_txn";
        } = {
            0: "none",
            1: "request_range",
            2: "request_put",
            3: "request_delete_range",
            4: "request_txn"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
    }
    static fromObject(data: {
        request_range?: ReturnType<typeof RangeRequest.prototype.toObject>;
        request_put?: ReturnType<typeof PutRequest.prototype.toObject>;
        request_delete_range?: ReturnType<typeof DeleteRangeRequest.prototype.toObject>;
        request_txn?: ReturnType<typeof TxnRequest.prototype.toObject>;
    }): RequestOp {
        const message = new RequestOp({});
        if (data.request_range != null) {
            message.request_range = RangeRequest.fromObject(data.request_range);
        }
        if (data.request_put != null) {
            message.request_put = PutRequest.fromObject(data.request_put);
        }
        if (data.request_delete_range != null) {
            message.request_delete_range = DeleteRangeRequest.fromObject(data.request_delete_range);
        }
        if (data.request_txn != null) {
            message.request_txn = TxnRequest.fromObject(data.request_txn);
        }
        return message;
    }
    toObject() {
        const data: {
            request_range?: ReturnType<typeof RangeRequest.prototype.toObject>;
            request_put?: ReturnType<typeof PutRequest.prototype.toObject>;
            request_delete_range?: ReturnType<typeof DeleteRangeRequest.prototype.toObject>;
            request_txn?: ReturnType<typeof TxnRequest.prototype.toObject>;
        } = {};
        if (this.request_range != null) {
            data.request_range = this.request_range.toObject();
        }
        if (this.request_put != null) {
            data.request_put = this.request_put.toObject();
        }
        if (this.request_delete_range != null) {
            data.request_delete_range = this.request_delete_range.toObject();
        }
        if (this.request_txn != null) {
            data.request_txn = this.request_txn.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_request_range)
            writer.writeMessage(1, this.request_range, () => this.request_range.serialize(writer));
        if (this.has_request_put)
            writer.writeMessage(2, this.request_put, () => this.request_put.serialize(writer));
        if (this.has_request_delete_range)
            writer.writeMessage(3, this.request_delete_range, () => this.request_delete_range.serialize(writer));
        if (this.has_request_txn)
            writer.writeMessage(4, this.request_txn, () => this.request_txn.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestOp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestOp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.request_range, () => message.request_range = RangeRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.request_put, () => message.request_put = PutRequest.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.request_delete_range, () => message.request_delete_range = DeleteRangeRequest.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.request_txn, () => message.request_txn = TxnRequest.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): RequestOp {
        return RequestOp.deserialize(bytes);
    }
}
export class ResponseOp extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4]];
    constructor(data?: any[] | ({} & (({
        response_range?: RangeResponse;
        response_put?: never;
        response_delete_range?: never;
        response_txn?: never;
    } | {
        response_range?: never;
        response_put?: PutResponse;
        response_delete_range?: never;
        response_txn?: never;
    } | {
        response_range?: never;
        response_put?: never;
        response_delete_range?: DeleteRangeResponse;
        response_txn?: never;
    } | {
        response_range?: never;
        response_put?: never;
        response_delete_range?: never;
        response_txn?: TxnResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("response_range" in data && data.response_range != undefined) {
                this.response_range = data.response_range;
            }
            if ("response_put" in data && data.response_put != undefined) {
                this.response_put = data.response_put;
            }
            if ("response_delete_range" in data && data.response_delete_range != undefined) {
                this.response_delete_range = data.response_delete_range;
            }
            if ("response_txn" in data && data.response_txn != undefined) {
                this.response_txn = data.response_txn;
            }
        }
    }
    get response_range() {
        return pb_1.Message.getWrapperField(this, RangeResponse, 1) as RangeResponse;
    }
    set response_range(value: RangeResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_response_range() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get response_put() {
        return pb_1.Message.getWrapperField(this, PutResponse, 2) as PutResponse;
    }
    set response_put(value: PutResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_response_put() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get response_delete_range() {
        return pb_1.Message.getWrapperField(this, DeleteRangeResponse, 3) as DeleteRangeResponse;
    }
    set response_delete_range(value: DeleteRangeResponse) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_response_delete_range() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get response_txn() {
        return pb_1.Message.getWrapperField(this, TxnResponse, 4) as TxnResponse;
    }
    set response_txn(value: TxnResponse) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_response_txn() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get response() {
        const cases: {
            [index: number]: "none" | "response_range" | "response_put" | "response_delete_range" | "response_txn";
        } = {
            0: "none",
            1: "response_range",
            2: "response_put",
            3: "response_delete_range",
            4: "response_txn"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
    }
    static fromObject(data: {
        response_range?: ReturnType<typeof RangeResponse.prototype.toObject>;
        response_put?: ReturnType<typeof PutResponse.prototype.toObject>;
        response_delete_range?: ReturnType<typeof DeleteRangeResponse.prototype.toObject>;
        response_txn?: ReturnType<typeof TxnResponse.prototype.toObject>;
    }): ResponseOp {
        const message = new ResponseOp({});
        if (data.response_range != null) {
            message.response_range = RangeResponse.fromObject(data.response_range);
        }
        if (data.response_put != null) {
            message.response_put = PutResponse.fromObject(data.response_put);
        }
        if (data.response_delete_range != null) {
            message.response_delete_range = DeleteRangeResponse.fromObject(data.response_delete_range);
        }
        if (data.response_txn != null) {
            message.response_txn = TxnResponse.fromObject(data.response_txn);
        }
        return message;
    }
    toObject() {
        const data: {
            response_range?: ReturnType<typeof RangeResponse.prototype.toObject>;
            response_put?: ReturnType<typeof PutResponse.prototype.toObject>;
            response_delete_range?: ReturnType<typeof DeleteRangeResponse.prototype.toObject>;
            response_txn?: ReturnType<typeof TxnResponse.prototype.toObject>;
        } = {};
        if (this.response_range != null) {
            data.response_range = this.response_range.toObject();
        }
        if (this.response_put != null) {
            data.response_put = this.response_put.toObject();
        }
        if (this.response_delete_range != null) {
            data.response_delete_range = this.response_delete_range.toObject();
        }
        if (this.response_txn != null) {
            data.response_txn = this.response_txn.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_response_range)
            writer.writeMessage(1, this.response_range, () => this.response_range.serialize(writer));
        if (this.has_response_put)
            writer.writeMessage(2, this.response_put, () => this.response_put.serialize(writer));
        if (this.has_response_delete_range)
            writer.writeMessage(3, this.response_delete_range, () => this.response_delete_range.serialize(writer));
        if (this.has_response_txn)
            writer.writeMessage(4, this.response_txn, () => this.response_txn.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseOp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseOp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.response_range, () => message.response_range = RangeResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.response_put, () => message.response_put = PutResponse.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.response_delete_range, () => message.response_delete_range = DeleteRangeResponse.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.response_txn, () => message.response_txn = TxnResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): ResponseOp {
        return ResponseOp.deserialize(bytes);
    }
}
export class Compare extends pb_1.Message {
    #one_of_decls: number[][] = [[4, 5, 6, 7, 8]];
    constructor(data?: any[] | ({
        result?: CompareCompareResult;
        target?: CompareCompareTarget;
        key?: Uint8Array;
        range_end?: Uint8Array;
    } & (({
        version?: number;
        create_revision?: never;
        mod_revision?: never;
        value?: never;
        lease?: never;
    } | {
        version?: never;
        create_revision?: number;
        mod_revision?: never;
        value?: never;
        lease?: never;
    } | {
        version?: never;
        create_revision?: never;
        mod_revision?: number;
        value?: never;
        lease?: never;
    } | {
        version?: never;
        create_revision?: never;
        mod_revision?: never;
        value?: Uint8Array;
        lease?: never;
    } | {
        version?: never;
        create_revision?: never;
        mod_revision?: never;
        value?: never;
        lease?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
            if ("target" in data && data.target != undefined) {
                this.target = data.target;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("create_revision" in data && data.create_revision != undefined) {
                this.create_revision = data.create_revision;
            }
            if ("mod_revision" in data && data.mod_revision != undefined) {
                this.mod_revision = data.mod_revision;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
            if ("lease" in data && data.lease != undefined) {
                this.lease = data.lease;
            }
            if ("range_end" in data && data.range_end != undefined) {
                this.range_end = data.range_end;
            }
        }
    }
    get result() {
        return pb_1.Message.getFieldWithDefault(this, 1, CompareCompareResult.Equal) as CompareCompareResult;
    }
    set result(value: CompareCompareResult) {
        pb_1.Message.setField(this, 1, value);
    }
    get target() {
        return pb_1.Message.getFieldWithDefault(this, 2, CompareCompareTarget.Version) as CompareCompareTarget;
    }
    set target(value: CompareCompareTarget) {
        pb_1.Message.setField(this, 2, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set key(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set version(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_version() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get create_revision() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set create_revision(value: number) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get has_create_revision() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get mod_revision() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set mod_revision(value: number) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
    }
    get has_mod_revision() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
    }
    set value(value: Uint8Array) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
    }
    get has_value() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get lease() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set lease(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
    }
    get has_lease() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get range_end() {
        return pb_1.Message.getFieldWithDefault(this, 64, new Uint8Array(0)) as Uint8Array;
    }
    set range_end(value: Uint8Array) {
        pb_1.Message.setField(this, 64, value);
    }
    get target_union() {
        const cases: {
            [index: number]: "none" | "version" | "create_revision" | "mod_revision" | "value" | "lease";
        } = {
            0: "none",
            4: "version",
            5: "create_revision",
            6: "mod_revision",
            7: "value",
            8: "lease"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7, 8])];
    }
    static fromObject(data: {
        result?: CompareCompareResult;
        target?: CompareCompareTarget;
        key?: Uint8Array;
        version?: number;
        create_revision?: number;
        mod_revision?: number;
        value?: Uint8Array;
        lease?: number;
        range_end?: Uint8Array;
    }): Compare {
        const message = new Compare({});
        if (data.result != null) {
            message.result = data.result;
        }
        if (data.target != null) {
            message.target = data.target;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.create_revision != null) {
            message.create_revision = data.create_revision;
        }
        if (data.mod_revision != null) {
            message.mod_revision = data.mod_revision;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        if (data.lease != null) {
            message.lease = data.lease;
        }
        if (data.range_end != null) {
            message.range_end = data.range_end;
        }
        return message;
    }
    toObject() {
        const data: {
            result?: CompareCompareResult;
            target?: CompareCompareTarget;
            key?: Uint8Array;
            version?: number;
            create_revision?: number;
            mod_revision?: number;
            value?: Uint8Array;
            lease?: number;
            range_end?: Uint8Array;
        } = {};
        if (this.result != null) {
            data.result = this.result;
        }
        if (this.target != null) {
            data.target = this.target;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.create_revision != null) {
            data.create_revision = this.create_revision;
        }
        if (this.mod_revision != null) {
            data.mod_revision = this.mod_revision;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        if (this.lease != null) {
            data.lease = this.lease;
        }
        if (this.range_end != null) {
            data.range_end = this.range_end;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.result != CompareCompareResult.Equal)
            writer.writeEnum(1, this.result);
        if (this.target != CompareCompareTarget.Version)
            writer.writeEnum(2, this.target);
        if (this.key.length)
            writer.writeBytes(3, this.key);
        if (this.has_version)
            writer.writeInt64(4, this.version);
        if (this.has_create_revision)
            writer.writeInt64(5, this.create_revision);
        if (this.has_mod_revision)
            writer.writeInt64(6, this.mod_revision);
        if (this.has_value)
            writer.writeBytes(7, this.value);
        if (this.has_lease)
            writer.writeInt64(8, this.lease);
        if (this.range_end.length)
            writer.writeBytes(64, this.range_end);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Compare {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Compare();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.result = reader.readEnum();
                    break;
                case 2:
                    message.target = reader.readEnum();
                    break;
                case 3:
                    message.key = reader.readBytes();
                    break;
                case 4:
                    message.version = reader.readInt64();
                    break;
                case 5:
                    message.create_revision = reader.readInt64();
                    break;
                case 6:
                    message.mod_revision = reader.readInt64();
                    break;
                case 7:
                    message.value = reader.readBytes();
                    break;
                case 8:
                    message.lease = reader.readInt64();
                    break;
                case 64:
                    message.range_end = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Compare {
        return Compare.deserialize(bytes);
    }
}
export enum CompareCompareResult {
    Equal = 0,
    Greater = 1,
    Less = 2,
    NotEqual = 3
}
export enum CompareCompareTarget {
    Version = 0,
    Create = 1,
    Mod = 2,
    Value = 3,
    Lease = 4
}
export class TxnRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        compare?: Compare[];
        success?: RequestOp[];
        failure?: RequestOp[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("compare" in data && data.compare != undefined) {
                this.compare = data.compare;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("failure" in data && data.failure != undefined) {
                this.failure = data.failure;
            }
        }
    }
    get compare() {
        return pb_1.Message.getRepeatedWrapperField(this, Compare, 1) as Compare[];
    }
    set compare(value: Compare[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get success() {
        return pb_1.Message.getRepeatedWrapperField(this, RequestOp, 2) as RequestOp[];
    }
    set success(value: RequestOp[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get failure() {
        return pb_1.Message.getRepeatedWrapperField(this, RequestOp, 3) as RequestOp[];
    }
    set failure(value: RequestOp[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        compare?: ReturnType<typeof Compare.prototype.toObject>[];
        success?: ReturnType<typeof RequestOp.prototype.toObject>[];
        failure?: ReturnType<typeof RequestOp.prototype.toObject>[];
    }): TxnRequest {
        const message = new TxnRequest({});
        if (data.compare != null) {
            message.compare = data.compare.map(item => Compare.fromObject(item));
        }
        if (data.success != null) {
            message.success = data.success.map(item => RequestOp.fromObject(item));
        }
        if (data.failure != null) {
            message.failure = data.failure.map(item => RequestOp.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            compare?: ReturnType<typeof Compare.prototype.toObject>[];
            success?: ReturnType<typeof RequestOp.prototype.toObject>[];
            failure?: ReturnType<typeof RequestOp.prototype.toObject>[];
        } = {};
        if (this.compare != null) {
            data.compare = this.compare.map((item: Compare) => item.toObject());
        }
        if (this.success != null) {
            data.success = this.success.map((item: RequestOp) => item.toObject());
        }
        if (this.failure != null) {
            data.failure = this.failure.map((item: RequestOp) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.compare.length)
            writer.writeRepeatedMessage(1, this.compare, (item: Compare) => item.serialize(writer));
        if (this.success.length)
            writer.writeRepeatedMessage(2, this.success, (item: RequestOp) => item.serialize(writer));
        if (this.failure.length)
            writer.writeRepeatedMessage(3, this.failure, (item: RequestOp) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TxnRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxnRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.compare, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Compare.deserialize(reader), Compare));
                    break;
                case 2:
                    reader.readMessage(message.success, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RequestOp.deserialize(reader), RequestOp));
                    break;
                case 3:
                    reader.readMessage(message.failure, () => pb_1.Message.addToRepeatedWrapperField(message, 3, RequestOp.deserialize(reader), RequestOp));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): TxnRequest {
        return TxnRequest.deserialize(bytes);
    }
}
export class TxnResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        succeeded?: boolean;
        responses?: ResponseOp[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("succeeded" in data && data.succeeded != undefined) {
                this.succeeded = data.succeeded;
            }
            if ("responses" in data && data.responses != undefined) {
                this.responses = data.responses;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get succeeded() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set succeeded(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get responses() {
        return pb_1.Message.getRepeatedWrapperField(this, ResponseOp, 3) as ResponseOp[];
    }
    set responses(value: ResponseOp[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        succeeded?: boolean;
        responses?: ReturnType<typeof ResponseOp.prototype.toObject>[];
    }): TxnResponse {
        const message = new TxnResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.succeeded != null) {
            message.succeeded = data.succeeded;
        }
        if (data.responses != null) {
            message.responses = data.responses.map(item => ResponseOp.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            succeeded?: boolean;
            responses?: ReturnType<typeof ResponseOp.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.succeeded != null) {
            data.succeeded = this.succeeded;
        }
        if (this.responses != null) {
            data.responses = this.responses.map((item: ResponseOp) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.succeeded != false)
            writer.writeBool(2, this.succeeded);
        if (this.responses.length)
            writer.writeRepeatedMessage(3, this.responses, (item: ResponseOp) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TxnResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxnResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.succeeded = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message.responses, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ResponseOp.deserialize(reader), ResponseOp));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): TxnResponse {
        return TxnResponse.deserialize(bytes);
    }
}
export class CompactionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        revision?: number;
        physical?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("revision" in data && data.revision != undefined) {
                this.revision = data.revision;
            }
            if ("physical" in data && data.physical != undefined) {
                this.physical = data.physical;
            }
        }
    }
    get revision() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set revision(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get physical() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set physical(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        revision?: number;
        physical?: boolean;
    }): CompactionRequest {
        const message = new CompactionRequest({});
        if (data.revision != null) {
            message.revision = data.revision;
        }
        if (data.physical != null) {
            message.physical = data.physical;
        }
        return message;
    }
    toObject() {
        const data: {
            revision?: number;
            physical?: boolean;
        } = {};
        if (this.revision != null) {
            data.revision = this.revision;
        }
        if (this.physical != null) {
            data.physical = this.physical;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.revision != 0)
            writer.writeInt64(1, this.revision);
        if (this.physical != false)
            writer.writeBool(2, this.physical);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompactionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.revision = reader.readInt64();
                    break;
                case 2:
                    message.physical = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): CompactionRequest {
        return CompactionRequest.deserialize(bytes);
    }
}
export class CompactionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): CompactionResponse {
        const message = new CompactionResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompactionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): CompactionResponse {
        return CompactionResponse.deserialize(bytes);
    }
}
export class HashRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): HashRequest {
        const message = new HashRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HashRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HashRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): HashRequest {
        return HashRequest.deserialize(bytes);
    }
}
export class HashKVRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        revision?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("revision" in data && data.revision != undefined) {
                this.revision = data.revision;
            }
        }
    }
    get revision() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set revision(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        revision?: number;
    }): HashKVRequest {
        const message = new HashKVRequest({});
        if (data.revision != null) {
            message.revision = data.revision;
        }
        return message;
    }
    toObject() {
        const data: {
            revision?: number;
        } = {};
        if (this.revision != null) {
            data.revision = this.revision;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.revision != 0)
            writer.writeInt64(1, this.revision);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HashKVRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HashKVRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.revision = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): HashKVRequest {
        return HashKVRequest.deserialize(bytes);
    }
}
export class HashKVResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        hash?: number;
        compact_revision?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("hash" in data && data.hash != undefined) {
                this.hash = data.hash;
            }
            if ("compact_revision" in data && data.compact_revision != undefined) {
                this.compact_revision = data.compact_revision;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get hash() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set hash(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get compact_revision() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set compact_revision(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        hash?: number;
        compact_revision?: number;
    }): HashKVResponse {
        const message = new HashKVResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.hash != null) {
            message.hash = data.hash;
        }
        if (data.compact_revision != null) {
            message.compact_revision = data.compact_revision;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            hash?: number;
            compact_revision?: number;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.hash != null) {
            data.hash = this.hash;
        }
        if (this.compact_revision != null) {
            data.compact_revision = this.compact_revision;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.hash != 0)
            writer.writeUint32(2, this.hash);
        if (this.compact_revision != 0)
            writer.writeInt64(3, this.compact_revision);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HashKVResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HashKVResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.hash = reader.readUint32();
                    break;
                case 3:
                    message.compact_revision = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): HashKVResponse {
        return HashKVResponse.deserialize(bytes);
    }
}
export class HashResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        hash?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("hash" in data && data.hash != undefined) {
                this.hash = data.hash;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get hash() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set hash(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        hash?: number;
    }): HashResponse {
        const message = new HashResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.hash != null) {
            message.hash = data.hash;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            hash?: number;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.hash != null) {
            data.hash = this.hash;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.hash != 0)
            writer.writeUint32(2, this.hash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HashResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HashResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.hash = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): HashResponse {
        return HashResponse.deserialize(bytes);
    }
}
export class SnapshotRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): SnapshotRequest {
        const message = new SnapshotRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SnapshotRequest {
        return SnapshotRequest.deserialize(bytes);
    }
}
export class SnapshotResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        remaining_bytes?: number;
        blob?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("remaining_bytes" in data && data.remaining_bytes != undefined) {
                this.remaining_bytes = data.remaining_bytes;
            }
            if ("blob" in data && data.blob != undefined) {
                this.blob = data.blob;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get remaining_bytes() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set remaining_bytes(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get blob() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set blob(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        remaining_bytes?: number;
        blob?: Uint8Array;
    }): SnapshotResponse {
        const message = new SnapshotResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.remaining_bytes != null) {
            message.remaining_bytes = data.remaining_bytes;
        }
        if (data.blob != null) {
            message.blob = data.blob;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            remaining_bytes?: number;
            blob?: Uint8Array;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.remaining_bytes != null) {
            data.remaining_bytes = this.remaining_bytes;
        }
        if (this.blob != null) {
            data.blob = this.blob;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.remaining_bytes != 0)
            writer.writeUint64(2, this.remaining_bytes);
        if (this.blob.length)
            writer.writeBytes(3, this.blob);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.remaining_bytes = reader.readUint64();
                    break;
                case 3:
                    message.blob = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): SnapshotResponse {
        return SnapshotResponse.deserialize(bytes);
    }
}
export class WatchRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3]];
    constructor(data?: any[] | ({} & (({
        create_request?: WatchCreateRequest;
        cancel_request?: never;
        progress_request?: never;
    } | {
        create_request?: never;
        cancel_request?: WatchCancelRequest;
        progress_request?: never;
    } | {
        create_request?: never;
        cancel_request?: never;
        progress_request?: WatchProgressRequest;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("create_request" in data && data.create_request != undefined) {
                this.create_request = data.create_request;
            }
            if ("cancel_request" in data && data.cancel_request != undefined) {
                this.cancel_request = data.cancel_request;
            }
            if ("progress_request" in data && data.progress_request != undefined) {
                this.progress_request = data.progress_request;
            }
        }
    }
    get create_request() {
        return pb_1.Message.getWrapperField(this, WatchCreateRequest, 1) as WatchCreateRequest;
    }
    set create_request(value: WatchCreateRequest) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_create_request() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get cancel_request() {
        return pb_1.Message.getWrapperField(this, WatchCancelRequest, 2) as WatchCancelRequest;
    }
    set cancel_request(value: WatchCancelRequest) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_cancel_request() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get progress_request() {
        return pb_1.Message.getWrapperField(this, WatchProgressRequest, 3) as WatchProgressRequest;
    }
    set progress_request(value: WatchProgressRequest) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_progress_request() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get request_union() {
        const cases: {
            [index: number]: "none" | "create_request" | "cancel_request" | "progress_request";
        } = {
            0: "none",
            1: "create_request",
            2: "cancel_request",
            3: "progress_request"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        create_request?: ReturnType<typeof WatchCreateRequest.prototype.toObject>;
        cancel_request?: ReturnType<typeof WatchCancelRequest.prototype.toObject>;
        progress_request?: ReturnType<typeof WatchProgressRequest.prototype.toObject>;
    }): WatchRequest {
        const message = new WatchRequest({});
        if (data.create_request != null) {
            message.create_request = WatchCreateRequest.fromObject(data.create_request);
        }
        if (data.cancel_request != null) {
            message.cancel_request = WatchCancelRequest.fromObject(data.cancel_request);
        }
        if (data.progress_request != null) {
            message.progress_request = WatchProgressRequest.fromObject(data.progress_request);
        }
        return message;
    }
    toObject() {
        const data: {
            create_request?: ReturnType<typeof WatchCreateRequest.prototype.toObject>;
            cancel_request?: ReturnType<typeof WatchCancelRequest.prototype.toObject>;
            progress_request?: ReturnType<typeof WatchProgressRequest.prototype.toObject>;
        } = {};
        if (this.create_request != null) {
            data.create_request = this.create_request.toObject();
        }
        if (this.cancel_request != null) {
            data.cancel_request = this.cancel_request.toObject();
        }
        if (this.progress_request != null) {
            data.progress_request = this.progress_request.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_create_request)
            writer.writeMessage(1, this.create_request, () => this.create_request.serialize(writer));
        if (this.has_cancel_request)
            writer.writeMessage(2, this.cancel_request, () => this.cancel_request.serialize(writer));
        if (this.has_progress_request)
            writer.writeMessage(3, this.progress_request, () => this.progress_request.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WatchRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.create_request, () => message.create_request = WatchCreateRequest.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.cancel_request, () => message.cancel_request = WatchCancelRequest.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.progress_request, () => message.progress_request = WatchProgressRequest.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): WatchRequest {
        return WatchRequest.deserialize(bytes);
    }
}
export class WatchCreateRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: Uint8Array;
        range_end?: Uint8Array;
        start_revision?: number;
        progress_notify?: boolean;
        filters?: WatchCreateRequestFilterType[];
        prev_kv?: boolean;
        watch_id?: number;
        fragment?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("range_end" in data && data.range_end != undefined) {
                this.range_end = data.range_end;
            }
            if ("start_revision" in data && data.start_revision != undefined) {
                this.start_revision = data.start_revision;
            }
            if ("progress_notify" in data && data.progress_notify != undefined) {
                this.progress_notify = data.progress_notify;
            }
            if ("filters" in data && data.filters != undefined) {
                this.filters = data.filters;
            }
            if ("prev_kv" in data && data.prev_kv != undefined) {
                this.prev_kv = data.prev_kv;
            }
            if ("watch_id" in data && data.watch_id != undefined) {
                this.watch_id = data.watch_id;
            }
            if ("fragment" in data && data.fragment != undefined) {
                this.fragment = data.fragment;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set key(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get range_end() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set range_end(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get start_revision() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set start_revision(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get progress_notify() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set progress_notify(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get filters() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as WatchCreateRequestFilterType[];
    }
    set filters(value: WatchCreateRequestFilterType[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get prev_kv() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set prev_kv(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get watch_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set watch_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get fragment() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set fragment(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        key?: Uint8Array;
        range_end?: Uint8Array;
        start_revision?: number;
        progress_notify?: boolean;
        filters?: WatchCreateRequestFilterType[];
        prev_kv?: boolean;
        watch_id?: number;
        fragment?: boolean;
    }): WatchCreateRequest {
        const message = new WatchCreateRequest({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.range_end != null) {
            message.range_end = data.range_end;
        }
        if (data.start_revision != null) {
            message.start_revision = data.start_revision;
        }
        if (data.progress_notify != null) {
            message.progress_notify = data.progress_notify;
        }
        if (data.filters != null) {
            message.filters = data.filters;
        }
        if (data.prev_kv != null) {
            message.prev_kv = data.prev_kv;
        }
        if (data.watch_id != null) {
            message.watch_id = data.watch_id;
        }
        if (data.fragment != null) {
            message.fragment = data.fragment;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: Uint8Array;
            range_end?: Uint8Array;
            start_revision?: number;
            progress_notify?: boolean;
            filters?: WatchCreateRequestFilterType[];
            prev_kv?: boolean;
            watch_id?: number;
            fragment?: boolean;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.range_end != null) {
            data.range_end = this.range_end;
        }
        if (this.start_revision != null) {
            data.start_revision = this.start_revision;
        }
        if (this.progress_notify != null) {
            data.progress_notify = this.progress_notify;
        }
        if (this.filters != null) {
            data.filters = this.filters;
        }
        if (this.prev_kv != null) {
            data.prev_kv = this.prev_kv;
        }
        if (this.watch_id != null) {
            data.watch_id = this.watch_id;
        }
        if (this.fragment != null) {
            data.fragment = this.fragment;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeBytes(1, this.key);
        if (this.range_end.length)
            writer.writeBytes(2, this.range_end);
        if (this.start_revision != 0)
            writer.writeInt64(3, this.start_revision);
        if (this.progress_notify != false)
            writer.writeBool(4, this.progress_notify);
        if (this.filters.length)
            writer.writePackedEnum(5, this.filters);
        if (this.prev_kv != false)
            writer.writeBool(6, this.prev_kv);
        if (this.watch_id != 0)
            writer.writeInt64(7, this.watch_id);
        if (this.fragment != false)
            writer.writeBool(8, this.fragment);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchCreateRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WatchCreateRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readBytes();
                    break;
                case 2:
                    message.range_end = reader.readBytes();
                    break;
                case 3:
                    message.start_revision = reader.readInt64();
                    break;
                case 4:
                    message.progress_notify = reader.readBool();
                    break;
                case 5:
                    message.filters = reader.readPackedEnum();
                    break;
                case 6:
                    message.prev_kv = reader.readBool();
                    break;
                case 7:
                    message.watch_id = reader.readInt64();
                    break;
                case 8:
                    message.fragment = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): WatchCreateRequest {
        return WatchCreateRequest.deserialize(bytes);
    }
}
export enum WatchCreateRequestFilterType {
    Noput = 0,
    Nodelete = 1
}
export class WatchCancelRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        watch_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("watch_id" in data && data.watch_id != undefined) {
                this.watch_id = data.watch_id;
            }
        }
    }
    get watch_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set watch_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        watch_id?: number;
    }): WatchCancelRequest {
        const message = new WatchCancelRequest({});
        if (data.watch_id != null) {
            message.watch_id = data.watch_id;
        }
        return message;
    }
    toObject() {
        const data: {
            watch_id?: number;
        } = {};
        if (this.watch_id != null) {
            data.watch_id = this.watch_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.watch_id != 0)
            writer.writeInt64(1, this.watch_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchCancelRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WatchCancelRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.watch_id = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): WatchCancelRequest {
        return WatchCancelRequest.deserialize(bytes);
    }
}
export class WatchProgressRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): WatchProgressRequest {
        const message = new WatchProgressRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchProgressRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WatchProgressRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): WatchProgressRequest {
        return WatchProgressRequest.deserialize(bytes);
    }
}
export class WatchResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        watch_id?: number;
        created?: boolean;
        canceled?: boolean;
        compact_revision?: number;
        cancel_reason?: string;
        fragment?: boolean;
        events?: dependency_2.Event[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("watch_id" in data && data.watch_id != undefined) {
                this.watch_id = data.watch_id;
            }
            if ("created" in data && data.created != undefined) {
                this.created = data.created;
            }
            if ("canceled" in data && data.canceled != undefined) {
                this.canceled = data.canceled;
            }
            if ("compact_revision" in data && data.compact_revision != undefined) {
                this.compact_revision = data.compact_revision;
            }
            if ("cancel_reason" in data && data.cancel_reason != undefined) {
                this.cancel_reason = data.cancel_reason;
            }
            if ("fragment" in data && data.fragment != undefined) {
                this.fragment = data.fragment;
            }
            if ("events" in data && data.events != undefined) {
                this.events = data.events;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get watch_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set watch_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get created() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set created(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get canceled() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set canceled(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get compact_revision() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set compact_revision(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get cancel_reason() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set cancel_reason(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get fragment() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set fragment(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get events() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Event, 11) as dependency_2.Event[];
    }
    set events(value: dependency_2.Event[]) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        watch_id?: number;
        created?: boolean;
        canceled?: boolean;
        compact_revision?: number;
        cancel_reason?: string;
        fragment?: boolean;
        events?: ReturnType<typeof dependency_2.Event.prototype.toObject>[];
    }): WatchResponse {
        const message = new WatchResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.watch_id != null) {
            message.watch_id = data.watch_id;
        }
        if (data.created != null) {
            message.created = data.created;
        }
        if (data.canceled != null) {
            message.canceled = data.canceled;
        }
        if (data.compact_revision != null) {
            message.compact_revision = data.compact_revision;
        }
        if (data.cancel_reason != null) {
            message.cancel_reason = data.cancel_reason;
        }
        if (data.fragment != null) {
            message.fragment = data.fragment;
        }
        if (data.events != null) {
            message.events = data.events.map(item => dependency_2.Event.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            watch_id?: number;
            created?: boolean;
            canceled?: boolean;
            compact_revision?: number;
            cancel_reason?: string;
            fragment?: boolean;
            events?: ReturnType<typeof dependency_2.Event.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.watch_id != null) {
            data.watch_id = this.watch_id;
        }
        if (this.created != null) {
            data.created = this.created;
        }
        if (this.canceled != null) {
            data.canceled = this.canceled;
        }
        if (this.compact_revision != null) {
            data.compact_revision = this.compact_revision;
        }
        if (this.cancel_reason != null) {
            data.cancel_reason = this.cancel_reason;
        }
        if (this.fragment != null) {
            data.fragment = this.fragment;
        }
        if (this.events != null) {
            data.events = this.events.map((item: dependency_2.Event) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.watch_id != 0)
            writer.writeInt64(2, this.watch_id);
        if (this.created != false)
            writer.writeBool(3, this.created);
        if (this.canceled != false)
            writer.writeBool(4, this.canceled);
        if (this.compact_revision != 0)
            writer.writeInt64(5, this.compact_revision);
        if (this.cancel_reason.length)
            writer.writeString(6, this.cancel_reason);
        if (this.fragment != false)
            writer.writeBool(7, this.fragment);
        if (this.events.length)
            writer.writeRepeatedMessage(11, this.events, (item: dependency_2.Event) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WatchResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.watch_id = reader.readInt64();
                    break;
                case 3:
                    message.created = reader.readBool();
                    break;
                case 4:
                    message.canceled = reader.readBool();
                    break;
                case 5:
                    message.compact_revision = reader.readInt64();
                    break;
                case 6:
                    message.cancel_reason = reader.readString();
                    break;
                case 7:
                    message.fragment = reader.readBool();
                    break;
                case 11:
                    reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_2.Event.deserialize(reader), dependency_2.Event));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): WatchResponse {
        return WatchResponse.deserialize(bytes);
    }
}
export class LeaseGrantRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        TTL?: number;
        ID?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("TTL" in data && data.TTL != undefined) {
                this.TTL = data.TTL;
            }
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
        }
    }
    get TTL() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set TTL(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        TTL?: number;
        ID?: number;
    }): LeaseGrantRequest {
        const message = new LeaseGrantRequest({});
        if (data.TTL != null) {
            message.TTL = data.TTL;
        }
        if (data.ID != null) {
            message.ID = data.ID;
        }
        return message;
    }
    toObject() {
        const data: {
            TTL?: number;
            ID?: number;
        } = {};
        if (this.TTL != null) {
            data.TTL = this.TTL;
        }
        if (this.ID != null) {
            data.ID = this.ID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.TTL != 0)
            writer.writeInt64(1, this.TTL);
        if (this.ID != 0)
            writer.writeInt64(2, this.ID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseGrantRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseGrantRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.TTL = reader.readInt64();
                    break;
                case 2:
                    message.ID = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseGrantRequest {
        return LeaseGrantRequest.deserialize(bytes);
    }
}
export class LeaseGrantResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        ID?: number;
        TTL?: number;
        error?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("TTL" in data && data.TTL != undefined) {
                this.TTL = data.TTL;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get TTL() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set TTL(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get error() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set error(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        ID?: number;
        TTL?: number;
        error?: string;
    }): LeaseGrantResponse {
        const message = new LeaseGrantResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.TTL != null) {
            message.TTL = data.TTL;
        }
        if (data.error != null) {
            message.error = data.error;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            ID?: number;
            TTL?: number;
            error?: string;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.TTL != null) {
            data.TTL = this.TTL;
        }
        if (this.error != null) {
            data.error = this.error;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.ID != 0)
            writer.writeInt64(2, this.ID);
        if (this.TTL != 0)
            writer.writeInt64(3, this.TTL);
        if (this.error.length)
            writer.writeString(4, this.error);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseGrantResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseGrantResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.ID = reader.readInt64();
                    break;
                case 3:
                    message.TTL = reader.readInt64();
                    break;
                case 4:
                    message.error = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseGrantResponse {
        return LeaseGrantResponse.deserialize(bytes);
    }
}
export class LeaseRevokeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ID?: number;
    }): LeaseRevokeRequest {
        const message = new LeaseRevokeRequest({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeInt64(1, this.ID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseRevokeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseRevokeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseRevokeRequest {
        return LeaseRevokeRequest.deserialize(bytes);
    }
}
export class LeaseRevokeResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): LeaseRevokeResponse {
        const message = new LeaseRevokeResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseRevokeResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseRevokeResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseRevokeResponse {
        return LeaseRevokeResponse.deserialize(bytes);
    }
}
export class LeaseCheckpoint extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
        remaining_TTL?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("remaining_TTL" in data && data.remaining_TTL != undefined) {
                this.remaining_TTL = data.remaining_TTL;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get remaining_TTL() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set remaining_TTL(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        ID?: number;
        remaining_TTL?: number;
    }): LeaseCheckpoint {
        const message = new LeaseCheckpoint({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.remaining_TTL != null) {
            message.remaining_TTL = data.remaining_TTL;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
            remaining_TTL?: number;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.remaining_TTL != null) {
            data.remaining_TTL = this.remaining_TTL;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeInt64(1, this.ID);
        if (this.remaining_TTL != 0)
            writer.writeInt64(2, this.remaining_TTL);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseCheckpoint {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseCheckpoint();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readInt64();
                    break;
                case 2:
                    message.remaining_TTL = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseCheckpoint {
        return LeaseCheckpoint.deserialize(bytes);
    }
}
export class LeaseCheckpointRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        checkpoints?: LeaseCheckpoint[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("checkpoints" in data && data.checkpoints != undefined) {
                this.checkpoints = data.checkpoints;
            }
        }
    }
    get checkpoints() {
        return pb_1.Message.getRepeatedWrapperField(this, LeaseCheckpoint, 1) as LeaseCheckpoint[];
    }
    set checkpoints(value: LeaseCheckpoint[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        checkpoints?: ReturnType<typeof LeaseCheckpoint.prototype.toObject>[];
    }): LeaseCheckpointRequest {
        const message = new LeaseCheckpointRequest({});
        if (data.checkpoints != null) {
            message.checkpoints = data.checkpoints.map(item => LeaseCheckpoint.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            checkpoints?: ReturnType<typeof LeaseCheckpoint.prototype.toObject>[];
        } = {};
        if (this.checkpoints != null) {
            data.checkpoints = this.checkpoints.map((item: LeaseCheckpoint) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.checkpoints.length)
            writer.writeRepeatedMessage(1, this.checkpoints, (item: LeaseCheckpoint) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseCheckpointRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseCheckpointRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.checkpoints, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LeaseCheckpoint.deserialize(reader), LeaseCheckpoint));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseCheckpointRequest {
        return LeaseCheckpointRequest.deserialize(bytes);
    }
}
export class LeaseCheckpointResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): LeaseCheckpointResponse {
        const message = new LeaseCheckpointResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseCheckpointResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseCheckpointResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseCheckpointResponse {
        return LeaseCheckpointResponse.deserialize(bytes);
    }
}
export class LeaseKeepAliveRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ID?: number;
    }): LeaseKeepAliveRequest {
        const message = new LeaseKeepAliveRequest({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeInt64(1, this.ID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseKeepAliveRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseKeepAliveRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseKeepAliveRequest {
        return LeaseKeepAliveRequest.deserialize(bytes);
    }
}
export class LeaseKeepAliveResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        ID?: number;
        TTL?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("TTL" in data && data.TTL != undefined) {
                this.TTL = data.TTL;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get TTL() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set TTL(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        ID?: number;
        TTL?: number;
    }): LeaseKeepAliveResponse {
        const message = new LeaseKeepAliveResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.TTL != null) {
            message.TTL = data.TTL;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            ID?: number;
            TTL?: number;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.TTL != null) {
            data.TTL = this.TTL;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.ID != 0)
            writer.writeInt64(2, this.ID);
        if (this.TTL != 0)
            writer.writeInt64(3, this.TTL);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseKeepAliveResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseKeepAliveResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.ID = reader.readInt64();
                    break;
                case 3:
                    message.TTL = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseKeepAliveResponse {
        return LeaseKeepAliveResponse.deserialize(bytes);
    }
}
export class LeaseTimeToLiveRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
        keys?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("keys" in data && data.keys != undefined) {
                this.keys = data.keys;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get keys() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set keys(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        ID?: number;
        keys?: boolean;
    }): LeaseTimeToLiveRequest {
        const message = new LeaseTimeToLiveRequest({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.keys != null) {
            message.keys = data.keys;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
            keys?: boolean;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.keys != null) {
            data.keys = this.keys;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeInt64(1, this.ID);
        if (this.keys != false)
            writer.writeBool(2, this.keys);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseTimeToLiveRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseTimeToLiveRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readInt64();
                    break;
                case 2:
                    message.keys = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseTimeToLiveRequest {
        return LeaseTimeToLiveRequest.deserialize(bytes);
    }
}
export class LeaseTimeToLiveResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        ID?: number;
        TTL?: number;
        grantedTTL?: number;
        keys?: Uint8Array[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("TTL" in data && data.TTL != undefined) {
                this.TTL = data.TTL;
            }
            if ("grantedTTL" in data && data.grantedTTL != undefined) {
                this.grantedTTL = data.grantedTTL;
            }
            if ("keys" in data && data.keys != undefined) {
                this.keys = data.keys;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get TTL() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set TTL(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get grantedTTL() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set grantedTTL(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get keys() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as Uint8Array[];
    }
    set keys(value: Uint8Array[]) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        ID?: number;
        TTL?: number;
        grantedTTL?: number;
        keys?: Uint8Array[];
    }): LeaseTimeToLiveResponse {
        const message = new LeaseTimeToLiveResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.TTL != null) {
            message.TTL = data.TTL;
        }
        if (data.grantedTTL != null) {
            message.grantedTTL = data.grantedTTL;
        }
        if (data.keys != null) {
            message.keys = data.keys;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            ID?: number;
            TTL?: number;
            grantedTTL?: number;
            keys?: Uint8Array[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.TTL != null) {
            data.TTL = this.TTL;
        }
        if (this.grantedTTL != null) {
            data.grantedTTL = this.grantedTTL;
        }
        if (this.keys != null) {
            data.keys = this.keys;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.ID != 0)
            writer.writeInt64(2, this.ID);
        if (this.TTL != 0)
            writer.writeInt64(3, this.TTL);
        if (this.grantedTTL != 0)
            writer.writeInt64(4, this.grantedTTL);
        if (this.keys.length)
            writer.writeRepeatedBytes(5, this.keys);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseTimeToLiveResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseTimeToLiveResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.ID = reader.readInt64();
                    break;
                case 3:
                    message.TTL = reader.readInt64();
                    break;
                case 4:
                    message.grantedTTL = reader.readInt64();
                    break;
                case 5:
                    pb_1.Message.addToRepeatedField(message, 5, reader.readBytes());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseTimeToLiveResponse {
        return LeaseTimeToLiveResponse.deserialize(bytes);
    }
}
export class LeaseLeasesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): LeaseLeasesRequest {
        const message = new LeaseLeasesRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseLeasesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseLeasesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseLeasesRequest {
        return LeaseLeasesRequest.deserialize(bytes);
    }
}
export class LeaseStatus extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ID?: number;
    }): LeaseStatus {
        const message = new LeaseStatus({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeInt64(1, this.ID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseStatus {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseStatus();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseStatus {
        return LeaseStatus.deserialize(bytes);
    }
}
export class LeaseLeasesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        leases?: LeaseStatus[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("leases" in data && data.leases != undefined) {
                this.leases = data.leases;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get leases() {
        return pb_1.Message.getRepeatedWrapperField(this, LeaseStatus, 2) as LeaseStatus[];
    }
    set leases(value: LeaseStatus[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        leases?: ReturnType<typeof LeaseStatus.prototype.toObject>[];
    }): LeaseLeasesResponse {
        const message = new LeaseLeasesResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.leases != null) {
            message.leases = data.leases.map(item => LeaseStatus.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            leases?: ReturnType<typeof LeaseStatus.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.leases != null) {
            data.leases = this.leases.map((item: LeaseStatus) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.leases.length)
            writer.writeRepeatedMessage(2, this.leases, (item: LeaseStatus) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaseLeasesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaseLeasesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.leases, () => pb_1.Message.addToRepeatedWrapperField(message, 2, LeaseStatus.deserialize(reader), LeaseStatus));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): LeaseLeasesResponse {
        return LeaseLeasesResponse.deserialize(bytes);
    }
}
export class Member extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
        name?: string;
        peerURLs?: string[];
        clientURLs?: string[];
        isLearner?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("peerURLs" in data && data.peerURLs != undefined) {
                this.peerURLs = data.peerURLs;
            }
            if ("clientURLs" in data && data.clientURLs != undefined) {
                this.clientURLs = data.clientURLs;
            }
            if ("isLearner" in data && data.isLearner != undefined) {
                this.isLearner = data.isLearner;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get peerURLs() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
    }
    set peerURLs(value: string[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get clientURLs() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set clientURLs(value: string[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get isLearner() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set isLearner(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        ID?: number;
        name?: string;
        peerURLs?: string[];
        clientURLs?: string[];
        isLearner?: boolean;
    }): Member {
        const message = new Member({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.peerURLs != null) {
            message.peerURLs = data.peerURLs;
        }
        if (data.clientURLs != null) {
            message.clientURLs = data.clientURLs;
        }
        if (data.isLearner != null) {
            message.isLearner = data.isLearner;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
            name?: string;
            peerURLs?: string[];
            clientURLs?: string[];
            isLearner?: boolean;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.peerURLs != null) {
            data.peerURLs = this.peerURLs;
        }
        if (this.clientURLs != null) {
            data.clientURLs = this.clientURLs;
        }
        if (this.isLearner != null) {
            data.isLearner = this.isLearner;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeUint64(1, this.ID);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.peerURLs.length)
            writer.writeRepeatedString(3, this.peerURLs);
        if (this.clientURLs.length)
            writer.writeRepeatedString(4, this.clientURLs);
        if (this.isLearner != false)
            writer.writeBool(5, this.isLearner);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Member {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Member();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readUint64();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                    break;
                case 5:
                    message.isLearner = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): Member {
        return Member.deserialize(bytes);
    }
}
export class MemberAddRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        peerURLs?: string[];
        isLearner?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("peerURLs" in data && data.peerURLs != undefined) {
                this.peerURLs = data.peerURLs;
            }
            if ("isLearner" in data && data.isLearner != undefined) {
                this.isLearner = data.isLearner;
            }
        }
    }
    get peerURLs() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set peerURLs(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get isLearner() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set isLearner(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        peerURLs?: string[];
        isLearner?: boolean;
    }): MemberAddRequest {
        const message = new MemberAddRequest({});
        if (data.peerURLs != null) {
            message.peerURLs = data.peerURLs;
        }
        if (data.isLearner != null) {
            message.isLearner = data.isLearner;
        }
        return message;
    }
    toObject() {
        const data: {
            peerURLs?: string[];
            isLearner?: boolean;
        } = {};
        if (this.peerURLs != null) {
            data.peerURLs = this.peerURLs;
        }
        if (this.isLearner != null) {
            data.isLearner = this.isLearner;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.peerURLs.length)
            writer.writeRepeatedString(1, this.peerURLs);
        if (this.isLearner != false)
            writer.writeBool(2, this.isLearner);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberAddRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberAddRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                case 2:
                    message.isLearner = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberAddRequest {
        return MemberAddRequest.deserialize(bytes);
    }
}
export class MemberAddResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        member?: Member;
        members?: Member[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("member" in data && data.member != undefined) {
                this.member = data.member;
            }
            if ("members" in data && data.members != undefined) {
                this.members = data.members;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get member() {
        return pb_1.Message.getWrapperField(this, Member, 2) as Member;
    }
    set member(value: Member) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_member() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get members() {
        return pb_1.Message.getRepeatedWrapperField(this, Member, 3) as Member[];
    }
    set members(value: Member[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        member?: ReturnType<typeof Member.prototype.toObject>;
        members?: ReturnType<typeof Member.prototype.toObject>[];
    }): MemberAddResponse {
        const message = new MemberAddResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.member != null) {
            message.member = Member.fromObject(data.member);
        }
        if (data.members != null) {
            message.members = data.members.map(item => Member.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            member?: ReturnType<typeof Member.prototype.toObject>;
            members?: ReturnType<typeof Member.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.member != null) {
            data.member = this.member.toObject();
        }
        if (this.members != null) {
            data.members = this.members.map((item: Member) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.has_member)
            writer.writeMessage(2, this.member, () => this.member.serialize(writer));
        if (this.members.length)
            writer.writeRepeatedMessage(3, this.members, (item: Member) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberAddResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberAddResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.member, () => message.member = Member.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Member.deserialize(reader), Member));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberAddResponse {
        return MemberAddResponse.deserialize(bytes);
    }
}
export class MemberRemoveRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ID?: number;
    }): MemberRemoveRequest {
        const message = new MemberRemoveRequest({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeUint64(1, this.ID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberRemoveRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberRemoveRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberRemoveRequest {
        return MemberRemoveRequest.deserialize(bytes);
    }
}
export class MemberRemoveResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        members?: Member[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("members" in data && data.members != undefined) {
                this.members = data.members;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get members() {
        return pb_1.Message.getRepeatedWrapperField(this, Member, 2) as Member[];
    }
    set members(value: Member[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        members?: ReturnType<typeof Member.prototype.toObject>[];
    }): MemberRemoveResponse {
        const message = new MemberRemoveResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.members != null) {
            message.members = data.members.map(item => Member.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            members?: ReturnType<typeof Member.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.members != null) {
            data.members = this.members.map((item: Member) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.members.length)
            writer.writeRepeatedMessage(2, this.members, (item: Member) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberRemoveResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberRemoveResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Member.deserialize(reader), Member));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberRemoveResponse {
        return MemberRemoveResponse.deserialize(bytes);
    }
}
export class MemberUpdateRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
        peerURLs?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("peerURLs" in data && data.peerURLs != undefined) {
                this.peerURLs = data.peerURLs;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get peerURLs() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set peerURLs(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        ID?: number;
        peerURLs?: string[];
    }): MemberUpdateRequest {
        const message = new MemberUpdateRequest({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.peerURLs != null) {
            message.peerURLs = data.peerURLs;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
            peerURLs?: string[];
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.peerURLs != null) {
            data.peerURLs = this.peerURLs;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeUint64(1, this.ID);
        if (this.peerURLs.length)
            writer.writeRepeatedString(2, this.peerURLs);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberUpdateRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberUpdateRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readUint64();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberUpdateRequest {
        return MemberUpdateRequest.deserialize(bytes);
    }
}
export class MemberUpdateResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        members?: Member[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("members" in data && data.members != undefined) {
                this.members = data.members;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get members() {
        return pb_1.Message.getRepeatedWrapperField(this, Member, 2) as Member[];
    }
    set members(value: Member[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        members?: ReturnType<typeof Member.prototype.toObject>[];
    }): MemberUpdateResponse {
        const message = new MemberUpdateResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.members != null) {
            message.members = data.members.map(item => Member.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            members?: ReturnType<typeof Member.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.members != null) {
            data.members = this.members.map((item: Member) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.members.length)
            writer.writeRepeatedMessage(2, this.members, (item: Member) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberUpdateResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberUpdateResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Member.deserialize(reader), Member));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberUpdateResponse {
        return MemberUpdateResponse.deserialize(bytes);
    }
}
export class MemberListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        linearizable?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("linearizable" in data && data.linearizable != undefined) {
                this.linearizable = data.linearizable;
            }
        }
    }
    get linearizable() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set linearizable(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        linearizable?: boolean;
    }): MemberListRequest {
        const message = new MemberListRequest({});
        if (data.linearizable != null) {
            message.linearizable = data.linearizable;
        }
        return message;
    }
    toObject() {
        const data: {
            linearizable?: boolean;
        } = {};
        if (this.linearizable != null) {
            data.linearizable = this.linearizable;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.linearizable != false)
            writer.writeBool(1, this.linearizable);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberListRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.linearizable = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberListRequest {
        return MemberListRequest.deserialize(bytes);
    }
}
export class MemberListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        members?: Member[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("members" in data && data.members != undefined) {
                this.members = data.members;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get members() {
        return pb_1.Message.getRepeatedWrapperField(this, Member, 2) as Member[];
    }
    set members(value: Member[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        members?: ReturnType<typeof Member.prototype.toObject>[];
    }): MemberListResponse {
        const message = new MemberListResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.members != null) {
            message.members = data.members.map(item => Member.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            members?: ReturnType<typeof Member.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.members != null) {
            data.members = this.members.map((item: Member) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.members.length)
            writer.writeRepeatedMessage(2, this.members, (item: Member) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberListResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberListResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Member.deserialize(reader), Member));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberListResponse {
        return MemberListResponse.deserialize(bytes);
    }
}
export class MemberPromoteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        ID?: number;
    }): MemberPromoteRequest {
        const message = new MemberPromoteRequest({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: number;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID != 0)
            writer.writeUint64(1, this.ID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberPromoteRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberPromoteRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberPromoteRequest {
        return MemberPromoteRequest.deserialize(bytes);
    }
}
export class MemberPromoteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        members?: Member[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("members" in data && data.members != undefined) {
                this.members = data.members;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get members() {
        return pb_1.Message.getRepeatedWrapperField(this, Member, 2) as Member[];
    }
    set members(value: Member[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        members?: ReturnType<typeof Member.prototype.toObject>[];
    }): MemberPromoteResponse {
        const message = new MemberPromoteResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.members != null) {
            message.members = data.members.map(item => Member.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            members?: ReturnType<typeof Member.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.members != null) {
            data.members = this.members.map((item: Member) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.members.length)
            writer.writeRepeatedMessage(2, this.members, (item: Member) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberPromoteResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberPromoteResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Member.deserialize(reader), Member));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MemberPromoteResponse {
        return MemberPromoteResponse.deserialize(bytes);
    }
}
export class DefragmentRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): DefragmentRequest {
        const message = new DefragmentRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefragmentRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefragmentRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): DefragmentRequest {
        return DefragmentRequest.deserialize(bytes);
    }
}
export class DefragmentResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): DefragmentResponse {
        const message = new DefragmentResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefragmentResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefragmentResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): DefragmentResponse {
        return DefragmentResponse.deserialize(bytes);
    }
}
export class MoveLeaderRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        targetID?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("targetID" in data && data.targetID != undefined) {
                this.targetID = data.targetID;
            }
        }
    }
    get targetID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set targetID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        targetID?: number;
    }): MoveLeaderRequest {
        const message = new MoveLeaderRequest({});
        if (data.targetID != null) {
            message.targetID = data.targetID;
        }
        return message;
    }
    toObject() {
        const data: {
            targetID?: number;
        } = {};
        if (this.targetID != null) {
            data.targetID = this.targetID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.targetID != 0)
            writer.writeUint64(1, this.targetID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveLeaderRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveLeaderRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.targetID = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MoveLeaderRequest {
        return MoveLeaderRequest.deserialize(bytes);
    }
}
export class MoveLeaderResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): MoveLeaderResponse {
        const message = new MoveLeaderResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveLeaderResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveLeaderResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): MoveLeaderResponse {
        return MoveLeaderResponse.deserialize(bytes);
    }
}
export class AlarmRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        action?: AlarmRequestAlarmAction;
        memberID?: number;
        alarm?: AlarmType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("action" in data && data.action != undefined) {
                this.action = data.action;
            }
            if ("memberID" in data && data.memberID != undefined) {
                this.memberID = data.memberID;
            }
            if ("alarm" in data && data.alarm != undefined) {
                this.alarm = data.alarm;
            }
        }
    }
    get action() {
        return pb_1.Message.getFieldWithDefault(this, 1, AlarmRequestAlarmAction.Get) as AlarmRequestAlarmAction;
    }
    set action(value: AlarmRequestAlarmAction) {
        pb_1.Message.setField(this, 1, value);
    }
    get memberID() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set memberID(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get alarm() {
        return pb_1.Message.getFieldWithDefault(this, 3, AlarmType.None) as AlarmType;
    }
    set alarm(value: AlarmType) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        action?: AlarmRequestAlarmAction;
        memberID?: number;
        alarm?: AlarmType;
    }): AlarmRequest {
        const message = new AlarmRequest({});
        if (data.action != null) {
            message.action = data.action;
        }
        if (data.memberID != null) {
            message.memberID = data.memberID;
        }
        if (data.alarm != null) {
            message.alarm = data.alarm;
        }
        return message;
    }
    toObject() {
        const data: {
            action?: AlarmRequestAlarmAction;
            memberID?: number;
            alarm?: AlarmType;
        } = {};
        if (this.action != null) {
            data.action = this.action;
        }
        if (this.memberID != null) {
            data.memberID = this.memberID;
        }
        if (this.alarm != null) {
            data.alarm = this.alarm;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.action != AlarmRequestAlarmAction.Get)
            writer.writeEnum(1, this.action);
        if (this.memberID != 0)
            writer.writeUint64(2, this.memberID);
        if (this.alarm != AlarmType.None)
            writer.writeEnum(3, this.alarm);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlarmRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlarmRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.action = reader.readEnum();
                    break;
                case 2:
                    message.memberID = reader.readUint64();
                    break;
                case 3:
                    message.alarm = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AlarmRequest {
        return AlarmRequest.deserialize(bytes);
    }
}
export enum AlarmRequestAlarmAction {
    Get = 0,
    Activate = 1,
    Deactivate = 2
}
export class AlarmMember extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        memberID?: number;
        alarm?: AlarmType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("memberID" in data && data.memberID != undefined) {
                this.memberID = data.memberID;
            }
            if ("alarm" in data && data.alarm != undefined) {
                this.alarm = data.alarm;
            }
        }
    }
    get memberID() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set memberID(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get alarm() {
        return pb_1.Message.getFieldWithDefault(this, 2, AlarmType.None) as AlarmType;
    }
    set alarm(value: AlarmType) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        memberID?: number;
        alarm?: AlarmType;
    }): AlarmMember {
        const message = new AlarmMember({});
        if (data.memberID != null) {
            message.memberID = data.memberID;
        }
        if (data.alarm != null) {
            message.alarm = data.alarm;
        }
        return message;
    }
    toObject() {
        const data: {
            memberID?: number;
            alarm?: AlarmType;
        } = {};
        if (this.memberID != null) {
            data.memberID = this.memberID;
        }
        if (this.alarm != null) {
            data.alarm = this.alarm;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.memberID != 0)
            writer.writeUint64(1, this.memberID);
        if (this.alarm != AlarmType.None)
            writer.writeEnum(2, this.alarm);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlarmMember {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlarmMember();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.memberID = reader.readUint64();
                    break;
                case 2:
                    message.alarm = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AlarmMember {
        return AlarmMember.deserialize(bytes);
    }
}
export class AlarmResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        alarms?: AlarmMember[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("alarms" in data && data.alarms != undefined) {
                this.alarms = data.alarms;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get alarms() {
        return pb_1.Message.getRepeatedWrapperField(this, AlarmMember, 2) as AlarmMember[];
    }
    set alarms(value: AlarmMember[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        alarms?: ReturnType<typeof AlarmMember.prototype.toObject>[];
    }): AlarmResponse {
        const message = new AlarmResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.alarms != null) {
            message.alarms = data.alarms.map(item => AlarmMember.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            alarms?: ReturnType<typeof AlarmMember.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.alarms != null) {
            data.alarms = this.alarms.map((item: AlarmMember) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.alarms.length)
            writer.writeRepeatedMessage(2, this.alarms, (item: AlarmMember) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlarmResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlarmResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.alarms, () => pb_1.Message.addToRepeatedWrapperField(message, 2, AlarmMember.deserialize(reader), AlarmMember));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AlarmResponse {
        return AlarmResponse.deserialize(bytes);
    }
}
export class DowngradeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        action?: DowngradeRequestDowngradeAction;
        version?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("action" in data && data.action != undefined) {
                this.action = data.action;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
        }
    }
    get action() {
        return pb_1.Message.getFieldWithDefault(this, 1, DowngradeRequestDowngradeAction.Validate) as DowngradeRequestDowngradeAction;
    }
    set action(value: DowngradeRequestDowngradeAction) {
        pb_1.Message.setField(this, 1, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set version(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        action?: DowngradeRequestDowngradeAction;
        version?: string;
    }): DowngradeRequest {
        const message = new DowngradeRequest({});
        if (data.action != null) {
            message.action = data.action;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        return message;
    }
    toObject() {
        const data: {
            action?: DowngradeRequestDowngradeAction;
            version?: string;
        } = {};
        if (this.action != null) {
            data.action = this.action;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.action != DowngradeRequestDowngradeAction.Validate)
            writer.writeEnum(1, this.action);
        if (this.version.length)
            writer.writeString(2, this.version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DowngradeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DowngradeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.action = reader.readEnum();
                    break;
                case 2:
                    message.version = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): DowngradeRequest {
        return DowngradeRequest.deserialize(bytes);
    }
}
export enum DowngradeRequestDowngradeAction {
    Validate = 0,
    Enable = 1,
    Cancel = 2
}
export class DowngradeResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        version?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set version(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        version?: string;
    }): DowngradeResponse {
        const message = new DowngradeResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.version != null) {
            message.version = data.version;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            version?: string;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.version != null) {
            data.version = this.version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.version.length)
            writer.writeString(2, this.version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DowngradeResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DowngradeResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.version = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): DowngradeResponse {
        return DowngradeResponse.deserialize(bytes);
    }
}
export class StatusRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): StatusRequest {
        const message = new StatusRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): StatusRequest {
        return StatusRequest.deserialize(bytes);
    }
}
export class StatusResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        version?: string;
        dbSize?: number;
        leader?: number;
        raftIndex?: number;
        raftTerm?: number;
        raftAppliedIndex?: number;
        errors?: string[];
        dbSizeInUse?: number;
        isLearner?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("dbSize" in data && data.dbSize != undefined) {
                this.dbSize = data.dbSize;
            }
            if ("leader" in data && data.leader != undefined) {
                this.leader = data.leader;
            }
            if ("raftIndex" in data && data.raftIndex != undefined) {
                this.raftIndex = data.raftIndex;
            }
            if ("raftTerm" in data && data.raftTerm != undefined) {
                this.raftTerm = data.raftTerm;
            }
            if ("raftAppliedIndex" in data && data.raftAppliedIndex != undefined) {
                this.raftAppliedIndex = data.raftAppliedIndex;
            }
            if ("errors" in data && data.errors != undefined) {
                this.errors = data.errors;
            }
            if ("dbSizeInUse" in data && data.dbSizeInUse != undefined) {
                this.dbSizeInUse = data.dbSizeInUse;
            }
            if ("isLearner" in data && data.isLearner != undefined) {
                this.isLearner = data.isLearner;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set version(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get dbSize() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set dbSize(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get leader() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set leader(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get raftIndex() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set raftIndex(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get raftTerm() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set raftTerm(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get raftAppliedIndex() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set raftAppliedIndex(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get errors() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
    }
    set errors(value: string[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get dbSizeInUse() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set dbSizeInUse(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get isLearner() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set isLearner(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        version?: string;
        dbSize?: number;
        leader?: number;
        raftIndex?: number;
        raftTerm?: number;
        raftAppliedIndex?: number;
        errors?: string[];
        dbSizeInUse?: number;
        isLearner?: boolean;
    }): StatusResponse {
        const message = new StatusResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.dbSize != null) {
            message.dbSize = data.dbSize;
        }
        if (data.leader != null) {
            message.leader = data.leader;
        }
        if (data.raftIndex != null) {
            message.raftIndex = data.raftIndex;
        }
        if (data.raftTerm != null) {
            message.raftTerm = data.raftTerm;
        }
        if (data.raftAppliedIndex != null) {
            message.raftAppliedIndex = data.raftAppliedIndex;
        }
        if (data.errors != null) {
            message.errors = data.errors;
        }
        if (data.dbSizeInUse != null) {
            message.dbSizeInUse = data.dbSizeInUse;
        }
        if (data.isLearner != null) {
            message.isLearner = data.isLearner;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            version?: string;
            dbSize?: number;
            leader?: number;
            raftIndex?: number;
            raftTerm?: number;
            raftAppliedIndex?: number;
            errors?: string[];
            dbSizeInUse?: number;
            isLearner?: boolean;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.dbSize != null) {
            data.dbSize = this.dbSize;
        }
        if (this.leader != null) {
            data.leader = this.leader;
        }
        if (this.raftIndex != null) {
            data.raftIndex = this.raftIndex;
        }
        if (this.raftTerm != null) {
            data.raftTerm = this.raftTerm;
        }
        if (this.raftAppliedIndex != null) {
            data.raftAppliedIndex = this.raftAppliedIndex;
        }
        if (this.errors != null) {
            data.errors = this.errors;
        }
        if (this.dbSizeInUse != null) {
            data.dbSizeInUse = this.dbSizeInUse;
        }
        if (this.isLearner != null) {
            data.isLearner = this.isLearner;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.version.length)
            writer.writeString(2, this.version);
        if (this.dbSize != 0)
            writer.writeInt64(3, this.dbSize);
        if (this.leader != 0)
            writer.writeUint64(4, this.leader);
        if (this.raftIndex != 0)
            writer.writeUint64(5, this.raftIndex);
        if (this.raftTerm != 0)
            writer.writeUint64(6, this.raftTerm);
        if (this.raftAppliedIndex != 0)
            writer.writeUint64(7, this.raftAppliedIndex);
        if (this.errors.length)
            writer.writeRepeatedString(8, this.errors);
        if (this.dbSizeInUse != 0)
            writer.writeInt64(9, this.dbSizeInUse);
        if (this.isLearner != false)
            writer.writeBool(10, this.isLearner);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.version = reader.readString();
                    break;
                case 3:
                    message.dbSize = reader.readInt64();
                    break;
                case 4:
                    message.leader = reader.readUint64();
                    break;
                case 5:
                    message.raftIndex = reader.readUint64();
                    break;
                case 6:
                    message.raftTerm = reader.readUint64();
                    break;
                case 7:
                    message.raftAppliedIndex = reader.readUint64();
                    break;
                case 8:
                    pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                    break;
                case 9:
                    message.dbSizeInUse = reader.readInt64();
                    break;
                case 10:
                    message.isLearner = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): StatusResponse {
        return StatusResponse.deserialize(bytes);
    }
}
export class AuthEnableRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AuthEnableRequest {
        const message = new AuthEnableRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthEnableRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthEnableRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthEnableRequest {
        return AuthEnableRequest.deserialize(bytes);
    }
}
export class AuthDisableRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AuthDisableRequest {
        const message = new AuthDisableRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthDisableRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthDisableRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthDisableRequest {
        return AuthDisableRequest.deserialize(bytes);
    }
}
export class AuthStatusRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AuthStatusRequest {
        const message = new AuthStatusRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthStatusRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthStatusRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthStatusRequest {
        return AuthStatusRequest.deserialize(bytes);
    }
}
export class AuthenticateRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        password?: string;
    }): AuthenticateRequest {
        const message = new AuthenticateRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            password?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthenticateRequest {
        return AuthenticateRequest.deserialize(bytes);
    }
}
export class AuthUserAddRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        password?: string;
        options?: dependency_3.UserAddOptions;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("options" in data && data.options != undefined) {
                this.options = data.options;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get options() {
        return pb_1.Message.getWrapperField(this, dependency_3.UserAddOptions, 3) as dependency_3.UserAddOptions;
    }
    set options(value: dependency_3.UserAddOptions) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_options() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        name?: string;
        password?: string;
        options?: ReturnType<typeof dependency_3.UserAddOptions.prototype.toObject>;
    }): AuthUserAddRequest {
        const message = new AuthUserAddRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.options != null) {
            message.options = dependency_3.UserAddOptions.fromObject(data.options);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            password?: string;
            options?: ReturnType<typeof dependency_3.UserAddOptions.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.options != null) {
            data.options = this.options.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.has_options)
            writer.writeMessage(3, this.options, () => this.options.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserAddRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserAddRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.options, () => message.options = dependency_3.UserAddOptions.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserAddRequest {
        return AuthUserAddRequest.deserialize(bytes);
    }
}
export class AuthUserGetRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): AuthUserGetRequest {
        const message = new AuthUserGetRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserGetRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserGetRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserGetRequest {
        return AuthUserGetRequest.deserialize(bytes);
    }
}
export class AuthUserDeleteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): AuthUserDeleteRequest {
        const message = new AuthUserDeleteRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserDeleteRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserDeleteRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserDeleteRequest {
        return AuthUserDeleteRequest.deserialize(bytes);
    }
}
export class AuthUserChangePasswordRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        password?: string;
    }): AuthUserChangePasswordRequest {
        const message = new AuthUserChangePasswordRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            password?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserChangePasswordRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserChangePasswordRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserChangePasswordRequest {
        return AuthUserChangePasswordRequest.deserialize(bytes);
    }
}
export class AuthUserGrantRoleRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: string;
        role?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get user() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        user?: string;
        role?: string;
    }): AuthUserGrantRoleRequest {
        const message = new AuthUserGrantRoleRequest({});
        if (data.user != null) {
            message.user = data.user;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data: {
            user?: string;
            role?: string;
        } = {};
        if (this.user != null) {
            data.user = this.user;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeString(1, this.user);
        if (this.role.length)
            writer.writeString(2, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserGrantRoleRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserGrantRoleRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user = reader.readString();
                    break;
                case 2:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserGrantRoleRequest {
        return AuthUserGrantRoleRequest.deserialize(bytes);
    }
}
export class AuthUserRevokeRoleRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        role?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        role?: string;
    }): AuthUserRevokeRoleRequest {
        const message = new AuthUserRevokeRoleRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            role?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.role.length)
            writer.writeString(2, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserRevokeRoleRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserRevokeRoleRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserRevokeRoleRequest {
        return AuthUserRevokeRoleRequest.deserialize(bytes);
    }
}
export class AuthRoleAddRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): AuthRoleAddRequest {
        const message = new AuthRoleAddRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleAddRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleAddRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleAddRequest {
        return AuthRoleAddRequest.deserialize(bytes);
    }
}
export class AuthRoleGetRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        role?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        role?: string;
    }): AuthRoleGetRequest {
        const message = new AuthRoleGetRequest({});
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data: {
            role?: string;
        } = {};
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.role.length)
            writer.writeString(1, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleGetRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleGetRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleGetRequest {
        return AuthRoleGetRequest.deserialize(bytes);
    }
}
export class AuthUserListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AuthUserListRequest {
        const message = new AuthUserListRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserListRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserListRequest {
        return AuthUserListRequest.deserialize(bytes);
    }
}
export class AuthRoleListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): AuthRoleListRequest {
        const message = new AuthRoleListRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleListRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleListRequest {
        return AuthRoleListRequest.deserialize(bytes);
    }
}
export class AuthRoleDeleteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        role?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        role?: string;
    }): AuthRoleDeleteRequest {
        const message = new AuthRoleDeleteRequest({});
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data: {
            role?: string;
        } = {};
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.role.length)
            writer.writeString(1, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleDeleteRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleDeleteRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleDeleteRequest {
        return AuthRoleDeleteRequest.deserialize(bytes);
    }
}
export class AuthRoleGrantPermissionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        perm?: dependency_3.Permission;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("perm" in data && data.perm != undefined) {
                this.perm = data.perm;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get perm() {
        return pb_1.Message.getWrapperField(this, dependency_3.Permission, 2) as dependency_3.Permission;
    }
    set perm(value: dependency_3.Permission) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_perm() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        name?: string;
        perm?: ReturnType<typeof dependency_3.Permission.prototype.toObject>;
    }): AuthRoleGrantPermissionRequest {
        const message = new AuthRoleGrantPermissionRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.perm != null) {
            message.perm = dependency_3.Permission.fromObject(data.perm);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            perm?: ReturnType<typeof dependency_3.Permission.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.perm != null) {
            data.perm = this.perm.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.has_perm)
            writer.writeMessage(2, this.perm, () => this.perm.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleGrantPermissionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleGrantPermissionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.perm, () => message.perm = dependency_3.Permission.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleGrantPermissionRequest {
        return AuthRoleGrantPermissionRequest.deserialize(bytes);
    }
}
export class AuthRoleRevokePermissionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        role?: string;
        key?: Uint8Array;
        range_end?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("range_end" in data && data.range_end != undefined) {
                this.range_end = data.range_end;
            }
        }
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set key(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get range_end() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set range_end(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        role?: string;
        key?: Uint8Array;
        range_end?: Uint8Array;
    }): AuthRoleRevokePermissionRequest {
        const message = new AuthRoleRevokePermissionRequest({});
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.range_end != null) {
            message.range_end = data.range_end;
        }
        return message;
    }
    toObject() {
        const data: {
            role?: string;
            key?: Uint8Array;
            range_end?: Uint8Array;
        } = {};
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.range_end != null) {
            data.range_end = this.range_end;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.role.length)
            writer.writeString(1, this.role);
        if (this.key.length)
            writer.writeBytes(2, this.key);
        if (this.range_end.length)
            writer.writeBytes(3, this.range_end);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleRevokePermissionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleRevokePermissionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.role = reader.readString();
                    break;
                case 2:
                    message.key = reader.readBytes();
                    break;
                case 3:
                    message.range_end = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleRevokePermissionRequest {
        return AuthRoleRevokePermissionRequest.deserialize(bytes);
    }
}
export class AuthEnableResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthEnableResponse {
        const message = new AuthEnableResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthEnableResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthEnableResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthEnableResponse {
        return AuthEnableResponse.deserialize(bytes);
    }
}
export class AuthDisableResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthDisableResponse {
        const message = new AuthDisableResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthDisableResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthDisableResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthDisableResponse {
        return AuthDisableResponse.deserialize(bytes);
    }
}
export class AuthStatusResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        enabled?: boolean;
        authRevision?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
            if ("authRevision" in data && data.authRevision != undefined) {
                this.authRevision = data.authRevision;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get authRevision() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set authRevision(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        enabled?: boolean;
        authRevision?: number;
    }): AuthStatusResponse {
        const message = new AuthStatusResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        if (data.authRevision != null) {
            message.authRevision = data.authRevision;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            enabled?: boolean;
            authRevision?: number;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        if (this.authRevision != null) {
            data.authRevision = this.authRevision;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.enabled != false)
            writer.writeBool(2, this.enabled);
        if (this.authRevision != 0)
            writer.writeUint64(3, this.authRevision);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthStatusResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthStatusResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.enabled = reader.readBool();
                    break;
                case 3:
                    message.authRevision = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthStatusResponse {
        return AuthStatusResponse.deserialize(bytes);
    }
}
export class AuthenticateResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        token?: string;
    }): AuthenticateResponse {
        const message = new AuthenticateResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            token?: string;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.token.length)
            writer.writeString(2, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthenticateResponse {
        return AuthenticateResponse.deserialize(bytes);
    }
}
export class AuthUserAddResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthUserAddResponse {
        const message = new AuthUserAddResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserAddResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserAddResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserAddResponse {
        return AuthUserAddResponse.deserialize(bytes);
    }
}
export class AuthUserGetResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        roles?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("roles" in data && data.roles != undefined) {
                this.roles = data.roles;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get roles() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set roles(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        roles?: string[];
    }): AuthUserGetResponse {
        const message = new AuthUserGetResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.roles != null) {
            message.roles = data.roles;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            roles?: string[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.roles != null) {
            data.roles = this.roles;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.roles.length)
            writer.writeRepeatedString(2, this.roles);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserGetResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserGetResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserGetResponse {
        return AuthUserGetResponse.deserialize(bytes);
    }
}
export class AuthUserDeleteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthUserDeleteResponse {
        const message = new AuthUserDeleteResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserDeleteResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserDeleteResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserDeleteResponse {
        return AuthUserDeleteResponse.deserialize(bytes);
    }
}
export class AuthUserChangePasswordResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthUserChangePasswordResponse {
        const message = new AuthUserChangePasswordResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserChangePasswordResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserChangePasswordResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserChangePasswordResponse {
        return AuthUserChangePasswordResponse.deserialize(bytes);
    }
}
export class AuthUserGrantRoleResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthUserGrantRoleResponse {
        const message = new AuthUserGrantRoleResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserGrantRoleResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserGrantRoleResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserGrantRoleResponse {
        return AuthUserGrantRoleResponse.deserialize(bytes);
    }
}
export class AuthUserRevokeRoleResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthUserRevokeRoleResponse {
        const message = new AuthUserRevokeRoleResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserRevokeRoleResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserRevokeRoleResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserRevokeRoleResponse {
        return AuthUserRevokeRoleResponse.deserialize(bytes);
    }
}
export class AuthRoleAddResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthRoleAddResponse {
        const message = new AuthRoleAddResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleAddResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleAddResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleAddResponse {
        return AuthRoleAddResponse.deserialize(bytes);
    }
}
export class AuthRoleGetResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        perm?: dependency_3.Permission[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("perm" in data && data.perm != undefined) {
                this.perm = data.perm;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get perm() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Permission, 2) as dependency_3.Permission[];
    }
    set perm(value: dependency_3.Permission[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        perm?: ReturnType<typeof dependency_3.Permission.prototype.toObject>[];
    }): AuthRoleGetResponse {
        const message = new AuthRoleGetResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.perm != null) {
            message.perm = data.perm.map(item => dependency_3.Permission.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            perm?: ReturnType<typeof dependency_3.Permission.prototype.toObject>[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.perm != null) {
            data.perm = this.perm.map((item: dependency_3.Permission) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.perm.length)
            writer.writeRepeatedMessage(2, this.perm, (item: dependency_3.Permission) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleGetResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleGetResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.perm, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Permission.deserialize(reader), dependency_3.Permission));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleGetResponse {
        return AuthRoleGetResponse.deserialize(bytes);
    }
}
export class AuthRoleListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        roles?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("roles" in data && data.roles != undefined) {
                this.roles = data.roles;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get roles() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set roles(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        roles?: string[];
    }): AuthRoleListResponse {
        const message = new AuthRoleListResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.roles != null) {
            message.roles = data.roles;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            roles?: string[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.roles != null) {
            data.roles = this.roles;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.roles.length)
            writer.writeRepeatedString(2, this.roles);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleListResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleListResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleListResponse {
        return AuthRoleListResponse.deserialize(bytes);
    }
}
export class AuthUserListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
        users?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
            if ("users" in data && data.users != undefined) {
                this.users = data.users;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get users() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set users(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        users?: string[];
    }): AuthUserListResponse {
        const message = new AuthUserListResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        if (data.users != null) {
            message.users = data.users;
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
            users?: string[];
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        if (this.users != null) {
            data.users = this.users;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (this.users.length)
            writer.writeRepeatedString(2, this.users);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthUserListResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthUserListResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthUserListResponse {
        return AuthUserListResponse.deserialize(bytes);
    }
}
export class AuthRoleDeleteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthRoleDeleteResponse {
        const message = new AuthRoleDeleteResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleDeleteResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleDeleteResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleDeleteResponse {
        return AuthRoleDeleteResponse.deserialize(bytes);
    }
}
export class AuthRoleGrantPermissionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthRoleGrantPermissionResponse {
        const message = new AuthRoleGrantPermissionResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleGrantPermissionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleGrantPermissionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleGrantPermissionResponse {
        return AuthRoleGrantPermissionResponse.deserialize(bytes);
    }
}
export class AuthRoleRevokePermissionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        header?: ResponseHeader;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("header" in data && data.header != undefined) {
                this.header = data.header;
            }
        }
    }
    get header() {
        return pb_1.Message.getWrapperField(this, ResponseHeader, 1) as ResponseHeader;
    }
    set header(value: ResponseHeader) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_header() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
    }): AuthRoleRevokePermissionResponse {
        const message = new AuthRoleRevokePermissionResponse({});
        if (data.header != null) {
            message.header = ResponseHeader.fromObject(data.header);
        }
        return message;
    }
    toObject() {
        const data: {
            header?: ReturnType<typeof ResponseHeader.prototype.toObject>;
        } = {};
        if (this.header != null) {
            data.header = this.header.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_header)
            writer.writeMessage(1, this.header, () => this.header.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRoleRevokePermissionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRoleRevokePermissionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.header, () => message.header = ResponseHeader.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static override deserializeBinary(bytes: Uint8Array): AuthRoleRevokePermissionResponse {
        return AuthRoleRevokePermissionResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedKVService {
    static definition = {
        Range: {
            path: "/etcdserverpb.KV/Range",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: RangeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => RangeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: RangeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => RangeResponse.deserialize(new Uint8Array(bytes))
        },
        Put: {
            path: "/etcdserverpb.KV/Put",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: PutRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => PutRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: PutResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => PutResponse.deserialize(new Uint8Array(bytes))
        },
        DeleteRange: {
            path: "/etcdserverpb.KV/DeleteRange",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteRangeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteRangeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DeleteRangeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DeleteRangeResponse.deserialize(new Uint8Array(bytes))
        },
        Txn: {
            path: "/etcdserverpb.KV/Txn",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: TxnRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => TxnRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: TxnResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => TxnResponse.deserialize(new Uint8Array(bytes))
        },
        Compact: {
            path: "/etcdserverpb.KV/Compact",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CompactionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CompactionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CompactionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CompactionResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Range(call: grpc_1.ServerUnaryCall<RangeRequest, RangeResponse>, callback: grpc_1.sendUnaryData<RangeResponse>): void;
    abstract Put(call: grpc_1.ServerUnaryCall<PutRequest, PutResponse>, callback: grpc_1.sendUnaryData<PutResponse>): void;
    abstract DeleteRange(call: grpc_1.ServerUnaryCall<DeleteRangeRequest, DeleteRangeResponse>, callback: grpc_1.sendUnaryData<DeleteRangeResponse>): void;
    abstract Txn(call: grpc_1.ServerUnaryCall<TxnRequest, TxnResponse>, callback: grpc_1.sendUnaryData<TxnResponse>): void;
    abstract Compact(call: grpc_1.ServerUnaryCall<CompactionRequest, CompactionResponse>, callback: grpc_1.sendUnaryData<CompactionResponse>): void;
}
export class KVClient extends grpc_1.makeGenericClientConstructor(UnimplementedKVService.definition, "KV", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Range: GrpcPromiseServiceInterface<RangeRequest, RangeResponse> = (message: RangeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<RangeResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Range(message, metadata, options, (error: grpc_1.ServiceError, response: RangeResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Put: GrpcPromiseServiceInterface<PutRequest, PutResponse> = (message: PutRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<PutResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Put(message, metadata, options, (error: grpc_1.ServiceError, response: PutResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    DeleteRange: GrpcPromiseServiceInterface<DeleteRangeRequest, DeleteRangeResponse> = (message: DeleteRangeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<DeleteRangeResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.DeleteRange(message, metadata, options, (error: grpc_1.ServiceError, response: DeleteRangeResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Txn: GrpcPromiseServiceInterface<TxnRequest, TxnResponse> = (message: TxnRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<TxnResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Txn(message, metadata, options, (error: grpc_1.ServiceError, response: TxnResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Compact: GrpcPromiseServiceInterface<CompactionRequest, CompactionResponse> = (message: CompactionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CompactionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Compact(message, metadata, options, (error: grpc_1.ServiceError, response: CompactionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedWatchService {
    static definition = {
        Watch: {
            path: "/etcdserverpb.Watch/Watch",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: WatchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => WatchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: WatchResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => WatchResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Watch(call: grpc_1.ServerDuplexStream<WatchRequest, WatchResponse>): void;
}
export class WatchClient extends grpc_1.makeGenericClientConstructor(UnimplementedWatchService.definition, "Watch", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Watch: GrpcChunkServiceInterface<WatchRequest, WatchResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<WatchRequest, WatchResponse> => {
        return super.Watch(metadata, options);
    };
}
export abstract class UnimplementedLeaseService {
    static definition = {
        LeaseGrant: {
            path: "/etcdserverpb.Lease/LeaseGrant",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LeaseGrantRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LeaseGrantRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LeaseGrantResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LeaseGrantResponse.deserialize(new Uint8Array(bytes))
        },
        LeaseRevoke: {
            path: "/etcdserverpb.Lease/LeaseRevoke",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LeaseRevokeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LeaseRevokeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LeaseRevokeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LeaseRevokeResponse.deserialize(new Uint8Array(bytes))
        },
        LeaseKeepAlive: {
            path: "/etcdserverpb.Lease/LeaseKeepAlive",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: LeaseKeepAliveRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LeaseKeepAliveRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LeaseKeepAliveResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LeaseKeepAliveResponse.deserialize(new Uint8Array(bytes))
        },
        LeaseTimeToLive: {
            path: "/etcdserverpb.Lease/LeaseTimeToLive",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LeaseTimeToLiveRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LeaseTimeToLiveRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LeaseTimeToLiveResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LeaseTimeToLiveResponse.deserialize(new Uint8Array(bytes))
        },
        LeaseLeases: {
            path: "/etcdserverpb.Lease/LeaseLeases",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LeaseLeasesRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LeaseLeasesRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LeaseLeasesResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LeaseLeasesResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract LeaseGrant(call: grpc_1.ServerUnaryCall<LeaseGrantRequest, LeaseGrantResponse>, callback: grpc_1.sendUnaryData<LeaseGrantResponse>): void;
    abstract LeaseRevoke(call: grpc_1.ServerUnaryCall<LeaseRevokeRequest, LeaseRevokeResponse>, callback: grpc_1.sendUnaryData<LeaseRevokeResponse>): void;
    abstract LeaseKeepAlive(call: grpc_1.ServerDuplexStream<LeaseKeepAliveRequest, LeaseKeepAliveResponse>): void;
    abstract LeaseTimeToLive(call: grpc_1.ServerUnaryCall<LeaseTimeToLiveRequest, LeaseTimeToLiveResponse>, callback: grpc_1.sendUnaryData<LeaseTimeToLiveResponse>): void;
    abstract LeaseLeases(call: grpc_1.ServerUnaryCall<LeaseLeasesRequest, LeaseLeasesResponse>, callback: grpc_1.sendUnaryData<LeaseLeasesResponse>): void;
}
export class LeaseClient extends grpc_1.makeGenericClientConstructor(UnimplementedLeaseService.definition, "Lease", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    LeaseGrant: GrpcPromiseServiceInterface<LeaseGrantRequest, LeaseGrantResponse> = (message: LeaseGrantRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<LeaseGrantResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.LeaseGrant(message, metadata, options, (error: grpc_1.ServiceError, response: LeaseGrantResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    LeaseRevoke: GrpcPromiseServiceInterface<LeaseRevokeRequest, LeaseRevokeResponse> = (message: LeaseRevokeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<LeaseRevokeResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.LeaseRevoke(message, metadata, options, (error: grpc_1.ServiceError, response: LeaseRevokeResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    LeaseKeepAlive: GrpcChunkServiceInterface<LeaseKeepAliveRequest, LeaseKeepAliveResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<LeaseKeepAliveRequest, LeaseKeepAliveResponse> => {
        return super.LeaseKeepAlive(metadata, options);
    };
    LeaseTimeToLive: GrpcPromiseServiceInterface<LeaseTimeToLiveRequest, LeaseTimeToLiveResponse> = (message: LeaseTimeToLiveRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<LeaseTimeToLiveResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.LeaseTimeToLive(message, metadata, options, (error: grpc_1.ServiceError, response: LeaseTimeToLiveResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    LeaseLeases: GrpcPromiseServiceInterface<LeaseLeasesRequest, LeaseLeasesResponse> = (message: LeaseLeasesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<LeaseLeasesResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.LeaseLeases(message, metadata, options, (error: grpc_1.ServiceError, response: LeaseLeasesResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedClusterService {
    static definition = {
        MemberAdd: {
            path: "/etcdserverpb.Cluster/MemberAdd",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MemberAddRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MemberAddRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MemberAddResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MemberAddResponse.deserialize(new Uint8Array(bytes))
        },
        MemberRemove: {
            path: "/etcdserverpb.Cluster/MemberRemove",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MemberRemoveRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MemberRemoveRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MemberRemoveResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MemberRemoveResponse.deserialize(new Uint8Array(bytes))
        },
        MemberUpdate: {
            path: "/etcdserverpb.Cluster/MemberUpdate",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MemberUpdateRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MemberUpdateRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MemberUpdateResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MemberUpdateResponse.deserialize(new Uint8Array(bytes))
        },
        MemberList: {
            path: "/etcdserverpb.Cluster/MemberList",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MemberListRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MemberListRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MemberListResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MemberListResponse.deserialize(new Uint8Array(bytes))
        },
        MemberPromote: {
            path: "/etcdserverpb.Cluster/MemberPromote",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MemberPromoteRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MemberPromoteRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MemberPromoteResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MemberPromoteResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract MemberAdd(call: grpc_1.ServerUnaryCall<MemberAddRequest, MemberAddResponse>, callback: grpc_1.sendUnaryData<MemberAddResponse>): void;
    abstract MemberRemove(call: grpc_1.ServerUnaryCall<MemberRemoveRequest, MemberRemoveResponse>, callback: grpc_1.sendUnaryData<MemberRemoveResponse>): void;
    abstract MemberUpdate(call: grpc_1.ServerUnaryCall<MemberUpdateRequest, MemberUpdateResponse>, callback: grpc_1.sendUnaryData<MemberUpdateResponse>): void;
    abstract MemberList(call: grpc_1.ServerUnaryCall<MemberListRequest, MemberListResponse>, callback: grpc_1.sendUnaryData<MemberListResponse>): void;
    abstract MemberPromote(call: grpc_1.ServerUnaryCall<MemberPromoteRequest, MemberPromoteResponse>, callback: grpc_1.sendUnaryData<MemberPromoteResponse>): void;
}
export class ClusterClient extends grpc_1.makeGenericClientConstructor(UnimplementedClusterService.definition, "Cluster", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    MemberAdd: GrpcPromiseServiceInterface<MemberAddRequest, MemberAddResponse> = (message: MemberAddRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<MemberAddResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.MemberAdd(message, metadata, options, (error: grpc_1.ServiceError, response: MemberAddResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    MemberRemove: GrpcPromiseServiceInterface<MemberRemoveRequest, MemberRemoveResponse> = (message: MemberRemoveRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<MemberRemoveResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.MemberRemove(message, metadata, options, (error: grpc_1.ServiceError, response: MemberRemoveResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    MemberUpdate: GrpcPromiseServiceInterface<MemberUpdateRequest, MemberUpdateResponse> = (message: MemberUpdateRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<MemberUpdateResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.MemberUpdate(message, metadata, options, (error: grpc_1.ServiceError, response: MemberUpdateResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    MemberList: GrpcPromiseServiceInterface<MemberListRequest, MemberListResponse> = (message: MemberListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<MemberListResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.MemberList(message, metadata, options, (error: grpc_1.ServiceError, response: MemberListResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    MemberPromote: GrpcPromiseServiceInterface<MemberPromoteRequest, MemberPromoteResponse> = (message: MemberPromoteRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<MemberPromoteResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.MemberPromote(message, metadata, options, (error: grpc_1.ServiceError, response: MemberPromoteResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedMaintenanceService {
    static definition = {
        Alarm: {
            path: "/etcdserverpb.Maintenance/Alarm",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AlarmRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AlarmRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AlarmResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AlarmResponse.deserialize(new Uint8Array(bytes))
        },
        Status: {
            path: "/etcdserverpb.Maintenance/Status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: StatusRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StatusRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        Defragment: {
            path: "/etcdserverpb.Maintenance/Defragment",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DefragmentRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DefragmentRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DefragmentResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DefragmentResponse.deserialize(new Uint8Array(bytes))
        },
        Hash: {
            path: "/etcdserverpb.Maintenance/Hash",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: HashRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => HashRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: HashResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => HashResponse.deserialize(new Uint8Array(bytes))
        },
        HashKV: {
            path: "/etcdserverpb.Maintenance/HashKV",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: HashKVRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => HashKVRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: HashKVResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => HashKVResponse.deserialize(new Uint8Array(bytes))
        },
        Snapshot: {
            path: "/etcdserverpb.Maintenance/Snapshot",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: SnapshotRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SnapshotRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SnapshotResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SnapshotResponse.deserialize(new Uint8Array(bytes))
        },
        MoveLeader: {
            path: "/etcdserverpb.Maintenance/MoveLeader",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MoveLeaderRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MoveLeaderRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MoveLeaderResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MoveLeaderResponse.deserialize(new Uint8Array(bytes))
        },
        Downgrade: {
            path: "/etcdserverpb.Maintenance/Downgrade",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DowngradeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DowngradeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DowngradeResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DowngradeResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Alarm(call: grpc_1.ServerUnaryCall<AlarmRequest, AlarmResponse>, callback: grpc_1.sendUnaryData<AlarmResponse>): void;
    abstract Status(call: grpc_1.ServerUnaryCall<StatusRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract Defragment(call: grpc_1.ServerUnaryCall<DefragmentRequest, DefragmentResponse>, callback: grpc_1.sendUnaryData<DefragmentResponse>): void;
    abstract Hash(call: grpc_1.ServerUnaryCall<HashRequest, HashResponse>, callback: grpc_1.sendUnaryData<HashResponse>): void;
    abstract HashKV(call: grpc_1.ServerUnaryCall<HashKVRequest, HashKVResponse>, callback: grpc_1.sendUnaryData<HashKVResponse>): void;
    abstract Snapshot(call: grpc_1.ServerWritableStream<SnapshotRequest, SnapshotResponse>): void;
    abstract MoveLeader(call: grpc_1.ServerUnaryCall<MoveLeaderRequest, MoveLeaderResponse>, callback: grpc_1.sendUnaryData<MoveLeaderResponse>): void;
    abstract Downgrade(call: grpc_1.ServerUnaryCall<DowngradeRequest, DowngradeResponse>, callback: grpc_1.sendUnaryData<DowngradeResponse>): void;
}
export class MaintenanceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMaintenanceService.definition, "Maintenance", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Alarm: GrpcPromiseServiceInterface<AlarmRequest, AlarmResponse> = (message: AlarmRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AlarmResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Alarm(message, metadata, options, (error: grpc_1.ServiceError, response: AlarmResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Status: GrpcPromiseServiceInterface<StatusRequest, StatusResponse> = (message: StatusRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Status(message, metadata, options, (error: grpc_1.ServiceError, response: StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Defragment: GrpcPromiseServiceInterface<DefragmentRequest, DefragmentResponse> = (message: DefragmentRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<DefragmentResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Defragment(message, metadata, options, (error: grpc_1.ServiceError, response: DefragmentResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Hash: GrpcPromiseServiceInterface<HashRequest, HashResponse> = (message: HashRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<HashResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Hash(message, metadata, options, (error: grpc_1.ServiceError, response: HashResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    HashKV: GrpcPromiseServiceInterface<HashKVRequest, HashKVResponse> = (message: HashKVRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<HashKVResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.HashKV(message, metadata, options, (error: grpc_1.ServiceError, response: HashKVResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Snapshot: GrpcStreamServiceInterface<SnapshotRequest, SnapshotRequest> = (message: SnapshotRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<SnapshotRequest> => {
        return super.Snapshot(message, metadata, options);
    };
    MoveLeader: GrpcPromiseServiceInterface<MoveLeaderRequest, MoveLeaderResponse> = (message: MoveLeaderRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<MoveLeaderResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.MoveLeader(message, metadata, options, (error: grpc_1.ServiceError, response: MoveLeaderResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Downgrade: GrpcPromiseServiceInterface<DowngradeRequest, DowngradeResponse> = (message: DowngradeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<DowngradeResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Downgrade(message, metadata, options, (error: grpc_1.ServiceError, response: DowngradeResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedAuthService {
    static definition = {
        AuthEnable: {
            path: "/etcdserverpb.Auth/AuthEnable",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthEnableRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthEnableRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthEnableResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthEnableResponse.deserialize(new Uint8Array(bytes))
        },
        AuthDisable: {
            path: "/etcdserverpb.Auth/AuthDisable",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthDisableRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthDisableRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthDisableResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthDisableResponse.deserialize(new Uint8Array(bytes))
        },
        AuthStatus: {
            path: "/etcdserverpb.Auth/AuthStatus",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthStatusRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthStatusRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthStatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthStatusResponse.deserialize(new Uint8Array(bytes))
        },
        Authenticate: {
            path: "/etcdserverpb.Auth/Authenticate",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthenticateRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthenticateRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
        },
        UserAdd: {
            path: "/etcdserverpb.Auth/UserAdd",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthUserAddRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthUserAddRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthUserAddResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthUserAddResponse.deserialize(new Uint8Array(bytes))
        },
        UserGet: {
            path: "/etcdserverpb.Auth/UserGet",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthUserGetRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthUserGetRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthUserGetResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthUserGetResponse.deserialize(new Uint8Array(bytes))
        },
        UserList: {
            path: "/etcdserverpb.Auth/UserList",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthUserListRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthUserListRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthUserListResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthUserListResponse.deserialize(new Uint8Array(bytes))
        },
        UserDelete: {
            path: "/etcdserverpb.Auth/UserDelete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthUserDeleteRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthUserDeleteRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthUserDeleteResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthUserDeleteResponse.deserialize(new Uint8Array(bytes))
        },
        UserChangePassword: {
            path: "/etcdserverpb.Auth/UserChangePassword",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthUserChangePasswordRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthUserChangePasswordRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthUserChangePasswordResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthUserChangePasswordResponse.deserialize(new Uint8Array(bytes))
        },
        UserGrantRole: {
            path: "/etcdserverpb.Auth/UserGrantRole",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthUserGrantRoleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthUserGrantRoleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthUserGrantRoleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthUserGrantRoleResponse.deserialize(new Uint8Array(bytes))
        },
        UserRevokeRole: {
            path: "/etcdserverpb.Auth/UserRevokeRole",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthUserRevokeRoleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthUserRevokeRoleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthUserRevokeRoleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthUserRevokeRoleResponse.deserialize(new Uint8Array(bytes))
        },
        RoleAdd: {
            path: "/etcdserverpb.Auth/RoleAdd",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthRoleAddRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthRoleAddRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthRoleAddResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthRoleAddResponse.deserialize(new Uint8Array(bytes))
        },
        RoleGet: {
            path: "/etcdserverpb.Auth/RoleGet",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthRoleGetRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthRoleGetRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthRoleGetResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthRoleGetResponse.deserialize(new Uint8Array(bytes))
        },
        RoleList: {
            path: "/etcdserverpb.Auth/RoleList",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthRoleListRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthRoleListRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthRoleListResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthRoleListResponse.deserialize(new Uint8Array(bytes))
        },
        RoleDelete: {
            path: "/etcdserverpb.Auth/RoleDelete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthRoleDeleteRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthRoleDeleteRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthRoleDeleteResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthRoleDeleteResponse.deserialize(new Uint8Array(bytes))
        },
        RoleGrantPermission: {
            path: "/etcdserverpb.Auth/RoleGrantPermission",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthRoleGrantPermissionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthRoleGrantPermissionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthRoleGrantPermissionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthRoleGrantPermissionResponse.deserialize(new Uint8Array(bytes))
        },
        RoleRevokePermission: {
            path: "/etcdserverpb.Auth/RoleRevokePermission",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AuthRoleRevokePermissionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AuthRoleRevokePermissionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AuthRoleRevokePermissionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AuthRoleRevokePermissionResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract AuthEnable(call: grpc_1.ServerUnaryCall<AuthEnableRequest, AuthEnableResponse>, callback: grpc_1.sendUnaryData<AuthEnableResponse>): void;
    abstract AuthDisable(call: grpc_1.ServerUnaryCall<AuthDisableRequest, AuthDisableResponse>, callback: grpc_1.sendUnaryData<AuthDisableResponse>): void;
    abstract AuthStatus(call: grpc_1.ServerUnaryCall<AuthStatusRequest, AuthStatusResponse>, callback: grpc_1.sendUnaryData<AuthStatusResponse>): void;
    abstract Authenticate(call: grpc_1.ServerUnaryCall<AuthenticateRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
    abstract UserAdd(call: grpc_1.ServerUnaryCall<AuthUserAddRequest, AuthUserAddResponse>, callback: grpc_1.sendUnaryData<AuthUserAddResponse>): void;
    abstract UserGet(call: grpc_1.ServerUnaryCall<AuthUserGetRequest, AuthUserGetResponse>, callback: grpc_1.sendUnaryData<AuthUserGetResponse>): void;
    abstract UserList(call: grpc_1.ServerUnaryCall<AuthUserListRequest, AuthUserListResponse>, callback: grpc_1.sendUnaryData<AuthUserListResponse>): void;
    abstract UserDelete(call: grpc_1.ServerUnaryCall<AuthUserDeleteRequest, AuthUserDeleteResponse>, callback: grpc_1.sendUnaryData<AuthUserDeleteResponse>): void;
    abstract UserChangePassword(call: grpc_1.ServerUnaryCall<AuthUserChangePasswordRequest, AuthUserChangePasswordResponse>, callback: grpc_1.sendUnaryData<AuthUserChangePasswordResponse>): void;
    abstract UserGrantRole(call: grpc_1.ServerUnaryCall<AuthUserGrantRoleRequest, AuthUserGrantRoleResponse>, callback: grpc_1.sendUnaryData<AuthUserGrantRoleResponse>): void;
    abstract UserRevokeRole(call: grpc_1.ServerUnaryCall<AuthUserRevokeRoleRequest, AuthUserRevokeRoleResponse>, callback: grpc_1.sendUnaryData<AuthUserRevokeRoleResponse>): void;
    abstract RoleAdd(call: grpc_1.ServerUnaryCall<AuthRoleAddRequest, AuthRoleAddResponse>, callback: grpc_1.sendUnaryData<AuthRoleAddResponse>): void;
    abstract RoleGet(call: grpc_1.ServerUnaryCall<AuthRoleGetRequest, AuthRoleGetResponse>, callback: grpc_1.sendUnaryData<AuthRoleGetResponse>): void;
    abstract RoleList(call: grpc_1.ServerUnaryCall<AuthRoleListRequest, AuthRoleListResponse>, callback: grpc_1.sendUnaryData<AuthRoleListResponse>): void;
    abstract RoleDelete(call: grpc_1.ServerUnaryCall<AuthRoleDeleteRequest, AuthRoleDeleteResponse>, callback: grpc_1.sendUnaryData<AuthRoleDeleteResponse>): void;
    abstract RoleGrantPermission(call: grpc_1.ServerUnaryCall<AuthRoleGrantPermissionRequest, AuthRoleGrantPermissionResponse>, callback: grpc_1.sendUnaryData<AuthRoleGrantPermissionResponse>): void;
    abstract RoleRevokePermission(call: grpc_1.ServerUnaryCall<AuthRoleRevokePermissionRequest, AuthRoleRevokePermissionResponse>, callback: grpc_1.sendUnaryData<AuthRoleRevokePermissionResponse>): void;
}
export class AuthClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthService.definition, "Auth", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    AuthEnable: GrpcPromiseServiceInterface<AuthEnableRequest, AuthEnableResponse> = (message: AuthEnableRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthEnableResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.AuthEnable(message, metadata, options, (error: grpc_1.ServiceError, response: AuthEnableResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    AuthDisable: GrpcPromiseServiceInterface<AuthDisableRequest, AuthDisableResponse> = (message: AuthDisableRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthDisableResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.AuthDisable(message, metadata, options, (error: grpc_1.ServiceError, response: AuthDisableResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    AuthStatus: GrpcPromiseServiceInterface<AuthStatusRequest, AuthStatusResponse> = (message: AuthStatusRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthStatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.AuthStatus(message, metadata, options, (error: grpc_1.ServiceError, response: AuthStatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    Authenticate: GrpcPromiseServiceInterface<AuthenticateRequest, AuthenticateResponse> = (message: AuthenticateRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthenticateResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.Authenticate(message, metadata, options, (error: grpc_1.ServiceError, response: AuthenticateResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    UserAdd: GrpcPromiseServiceInterface<AuthUserAddRequest, AuthUserAddResponse> = (message: AuthUserAddRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthUserAddResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.UserAdd(message, metadata, options, (error: grpc_1.ServiceError, response: AuthUserAddResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    UserGet: GrpcPromiseServiceInterface<AuthUserGetRequest, AuthUserGetResponse> = (message: AuthUserGetRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthUserGetResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.UserGet(message, metadata, options, (error: grpc_1.ServiceError, response: AuthUserGetResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    UserList: GrpcPromiseServiceInterface<AuthUserListRequest, AuthUserListResponse> = (message: AuthUserListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthUserListResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.UserList(message, metadata, options, (error: grpc_1.ServiceError, response: AuthUserListResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    UserDelete: GrpcPromiseServiceInterface<AuthUserDeleteRequest, AuthUserDeleteResponse> = (message: AuthUserDeleteRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthUserDeleteResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.UserDelete(message, metadata, options, (error: grpc_1.ServiceError, response: AuthUserDeleteResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    UserChangePassword: GrpcPromiseServiceInterface<AuthUserChangePasswordRequest, AuthUserChangePasswordResponse> = (message: AuthUserChangePasswordRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthUserChangePasswordResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.UserChangePassword(message, metadata, options, (error: grpc_1.ServiceError, response: AuthUserChangePasswordResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    UserGrantRole: GrpcPromiseServiceInterface<AuthUserGrantRoleRequest, AuthUserGrantRoleResponse> = (message: AuthUserGrantRoleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthUserGrantRoleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.UserGrantRole(message, metadata, options, (error: grpc_1.ServiceError, response: AuthUserGrantRoleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    UserRevokeRole: GrpcPromiseServiceInterface<AuthUserRevokeRoleRequest, AuthUserRevokeRoleResponse> = (message: AuthUserRevokeRoleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthUserRevokeRoleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.UserRevokeRole(message, metadata, options, (error: grpc_1.ServiceError, response: AuthUserRevokeRoleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    RoleAdd: GrpcPromiseServiceInterface<AuthRoleAddRequest, AuthRoleAddResponse> = (message: AuthRoleAddRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthRoleAddResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.RoleAdd(message, metadata, options, (error: grpc_1.ServiceError, response: AuthRoleAddResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    RoleGet: GrpcPromiseServiceInterface<AuthRoleGetRequest, AuthRoleGetResponse> = (message: AuthRoleGetRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthRoleGetResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.RoleGet(message, metadata, options, (error: grpc_1.ServiceError, response: AuthRoleGetResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    RoleList: GrpcPromiseServiceInterface<AuthRoleListRequest, AuthRoleListResponse> = (message: AuthRoleListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthRoleListResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.RoleList(message, metadata, options, (error: grpc_1.ServiceError, response: AuthRoleListResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    RoleDelete: GrpcPromiseServiceInterface<AuthRoleDeleteRequest, AuthRoleDeleteResponse> = (message: AuthRoleDeleteRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthRoleDeleteResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.RoleDelete(message, metadata, options, (error: grpc_1.ServiceError, response: AuthRoleDeleteResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    RoleGrantPermission: GrpcPromiseServiceInterface<AuthRoleGrantPermissionRequest, AuthRoleGrantPermissionResponse> = (message: AuthRoleGrantPermissionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthRoleGrantPermissionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.RoleGrantPermission(message, metadata, options, (error: grpc_1.ServiceError, response: AuthRoleGrantPermissionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    RoleRevokePermission: GrpcPromiseServiceInterface<AuthRoleRevokePermissionRequest, AuthRoleRevokePermissionResponse> = (message: AuthRoleRevokePermissionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<AuthRoleRevokePermissionResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.RoleRevokePermission(message, metadata, options, (error: grpc_1.ServiceError, response: AuthRoleRevokePermissionResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
